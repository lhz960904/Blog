<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>ihaoze</title>
        <link>https://ihaoze.cn/blog/</link>
        <description>lihaoze's technology blog</description>
        <lastBuildDate>Mon, 29 May 2023 01:45:16 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-CN</language>
        <copyright>Copyright (c) 2023-present, HaoZe Li and blog contributors</copyright>
        <item>
            <title><![CDATA[@vue/reactivity 响应式源码阅读]]></title>
            <link>https://ihaoze.cn/blog//posts/vue-reactivity-peel</link>
            <guid>https://ihaoze.cn/blog//posts/vue-reactivity-peel</guid>
            <pubDate>Mon, 31 Aug 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[<p>我们都知道 <code>Vue3.0</code> 将响应式部分单独抽离成 <code>reactivity</code> npm 包，并且内部用 <code>proxy</code> 代替了 <code>Object.defineProperty</code>，本文通过对源码来一起学习它是怎么工作的。</p>
<!-- more -->
<h2 id="reactive" tabindex="-1">reactive <a class="header-anchor" href="#reactive" aria-label="Permalink to &quot;reactive&quot;">&ZeroWidthSpace;</a></h2>
<p>我们先来看 <code>reactive</code> 的使用，我们传入对象、数组、Map实例、Set实例任意一种，都可以将其变成响应式，如果属性在 <code>effect</code> 函数中被使用，就会被收集依赖，当属性值变更时，就会重新执行 <code>effect</code> 函数。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> state </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">reactive</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">count</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 会执行2遍，++前后各执行一遍</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">变更时自动执行</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">state</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">count</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">state</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">++;</span></span></code></pre>
</div><p>我们直接查来看源码中的实现，具体文件是 <code>packages/reactivity/src/reactive.ts</code></p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">reactive</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 如果target是只读的，不能再进行响应式，直接返回</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">target</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span><span style="color: #F07178">[</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">__v_isReadonly</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 通过 createReactiveObject 创建响应式对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">createReactiveObject</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">mutableHandlers</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">mutableCollectionHandlers</span></span>
<span class="line"><span style="color: #F07178">  )</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>我们会先判断传入的 <code>target</code> 是否已经是只读状态了，我们通过 <code>readonly</code> 可以生成一个只读对象，该 API 会在之后进行分析，调用其方法后会拦截 <code>__v_isReadonly</code> 属性返回 <code>true</code> 。</p>
<p>其实 <code>reactive</code> , <code>readonly</code> 都是通过 <code>createReactiveObject</code> 来创建，只不过传入的参数不同而已，我们来重点看一下 <code>createReactiveObject</code> 的实现：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createReactiveObject</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">isReadonly</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">baseHandlers</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">collectionHandlers</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 不是对象直接返回 （不是对象可以使用 ref 做到响应式，后面会讲到）</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #82AAFF">isObject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">)) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 被代理过会有__v_raw属性，不需要再进行代理，直接返回</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 特例：如果对一个响应式对象再次进行只读操作，是可以的 readonly(reactive({}))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">[</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">__v_raw</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">isReadonly</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span><span style="color: #F07178">[</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">__v_isReactive</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">])) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 查看target是否被代理过，Map中存在，说明代理过，可以直接返回结果</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">proxyMap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">isReadonly</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">readonlyMap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reactiveMap</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">existingProxy</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">proxyMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">existingProxy</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">existingProxy</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 拿到target具体的类型，进行代理。集合类型会使用collectionHandlers</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">targetType</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">getTargetType</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">proxy</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Proxy</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">targetType</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TargetType</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">COLLECTION</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">collectionHandlers</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">baseHandlers</span></span>
<span class="line"><span style="color: #F07178">  )</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 代理过存在Map中，用于同target，直接返回</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">proxyMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">proxy</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">proxy</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><code>createReactiveObject</code> 函数主要做三件事情，<strong>1. 首先校验target 是否合法</strong>，<strong>2. 然后尝试从缓存中拿结果</strong>，<strong>3. 进行proxy代理</strong>。</p>
<p>响应式核心是在代理操作中，进行收集依赖或派发更新。 具体逻辑都在传入的 <code>handlers</code> 对象里面。我们这里只对对象或数组进行分析，使用的是 <code>mutableHandlers</code> 对象。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> mutableHandlers </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  get</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  set</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  deleteProperty</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  has</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  ownKeys</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>对于数组和对象，<code>reactive</code> 对以上5个操作进行了代理，每个操作中都会调用<strong>收集依赖</strong>或<strong>派发更新</strong> ， 我们先来看 <code>get</code> 操作：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> get </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createGetter</span><span style="color: #A6ACCD">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createGetter</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">isReadonly</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">shallow</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">get</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">receiver</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 对 `__v_isReactive` `__v_isReadonly` `__v_raw` 进行拦截</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 省略无关代码...</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 对数组 &#39;includes&#39;, &#39;indexOf&#39;, &#39;lastIndexOf&#39; API进行拦截，收集依赖</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 省略无关代码...</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Reflect</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">receiver</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 不是已读，需要收集依赖</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">isReadonly</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">track</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TrackOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">GET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果是浅响应式，直接返回就可以</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">shallow</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果res是Ref对象，直接返回res.value。通过数组索引获取的值不会自动 &quot;解包&quot;</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 省略无关代码...</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 不是浅响应式，返回的还是对象，需要进行响应式代理，一种懒执行优化</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">isObject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">res</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">isReadonly</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #82AAFF">readonly</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">res</span><span style="color: #F07178">) </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reactive</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">res</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>上述代码的最关键的是 <code>track(target, TrackOpTypes.GET, key)</code>，该方法就是用于收集依赖，方法的实现会再后面进行分析。在 <code>Vue2.x</code>中，嵌套对象，会在初始化时就递归进行代理操作，<code>3.0</code> 改变了这一点，当访问到时才会进行再次的代理，这也是一种优化性能的手段。</p>
<p>我们再来看下 <code>set</code> 代理操作</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> set </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createSetter</span><span style="color: #A6ACCD">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createSetter</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">shallow</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">set</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">receiver</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 旧值</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldValue</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">shallow</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 非浅响应时，如果从ref 变成 非ref，不需要派发更新</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">toRaw</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">) </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">isRef</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldValue</span><span style="color: #F07178">) </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #82AAFF">isRef</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">oldValue</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Reflect</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">receiver</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果target是原型链上的对象，不需要派发更新</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">target</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #82AAFF">toRaw</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">receiver</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// hadKey代表自身上存在该属性</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">hadKey</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">trigger</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">ADD</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">hasChanged</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldValue</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">trigger</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">SET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldValue</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>与 <code>track</code> 函数相对应的就是 <code>trigger</code> 函数，它俩分别是收集依赖，派发更新。具体实现我们放在后面结合 <code>effect</code> 函数一起分析。我们可以假想它们的工作方式如下：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> effects </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 把函数放到数组中</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> track </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> effects</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #A6ACCD">(fn)</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 遍历数组再次执行这些函数</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> tigger </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> effects</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD; font-style: italic">effect</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">())</span></span></code></pre>
</div><h2 id="readonly" tabindex="-1">readonly <a class="header-anchor" href="#readonly" aria-label="Permalink to &quot;readonly&quot;">&ZeroWidthSpace;</a></h2>
<p>上面已经说过 <code>readonly</code> 也是调用 <code>createReactiveObject</code> 来创建，第二个参数传入true，代表是只读。并且代理操作传入 <code>readonlyHandlers</code> 和<code>readonlyCollectionHandlers</code></p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">readonly</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">createReactiveObject</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">readonlyHandlers</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">readonlyCollectionHandlers</span></span>
<span class="line"><span style="color: #F07178">  )</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>我们来看下 <code>shallowReactiveHandlers</code></p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> readonlyHandlers </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">get</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createGetter</span><span style="color: #A6ACCD">(</span><span style="color: #FF9CAC">true</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  has</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  ownKeys</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">set</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">__DEV__</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">warn</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">deleteProperty</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">__DEV__</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">warn</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createGetter</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">isReadonly</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">shallow</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">get</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">receiver</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 忽略无关代码..</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Reflect</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">receiver</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 只读时，不进行依赖收集</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">isReadonly</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">track</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TrackOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">GET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>使用 <code>createGetter</code> 传入 <code>true</code>，这样在函数内部判断时，不会进行依赖收集，再设置(set)、删除(deleteProperty)时，都不进行操作，非生产环境给出警告即可。</p>
<h2 id="ref" tabindex="-1">ref <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;ref&quot;">&ZeroWidthSpace;</a></h2>
<p>因为 <code>reactive</code> 方法是通过 <code>proxy</code> 代理属性相关操作，如果我们只想对基本数据类型进行响应式，<code>reactive</code> 就没有办法实现了。<code>Vue</code> 提供的 <code>ref</code> 帮我们做了这件事情。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> number </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">ref</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 会执行2遍，++前后各执行一遍</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">变更时自动执行</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">number</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">number</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">++;</span></span></code></pre>
</div><p>我们看一下源码中是如何实现的，文件位置：<code>packages/reactivity/src/ref.ts</code></p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">ref</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">createRef</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createRef</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">rawValue</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">shallow</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 如果已经是ref对象，直接返回</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">isRef</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">rawValue</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">rawValue</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 通过实例化RefImpl类实现</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">RefImpl</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">rawValue</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">shallow</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><code>ref</code> 最后是返回通过实例化<code>RefImpl</code>类的对象，一起来看一下这个类都做了哪些事情</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> convert </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">isObject</span><span style="color: #A6ACCD">(val) </span><span style="color: #89DDFF">?</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">reactive</span><span style="color: #A6ACCD">(val) </span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> val</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">RefImpl</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 具体的值</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">_value</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 标识是ref, isRef函数实现就是监测是否存在该属性</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">__v_isRef</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">constructor</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">_rawValue</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果是对象，要使用 reactive 变成响应式</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">convert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">_rawValue</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 获取值时，进行依赖收集</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">get</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">value</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">track</span><span style="color: #F07178">(</span><span style="color: #82AAFF">toRaw</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TrackOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">GET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">value</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_value</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 值变更时，派发更新</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">set</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">value</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">newVal</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 跟上一次比较，是否有变更，变更就需要通知更新</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">hasChanged</span><span style="color: #F07178">(</span><span style="color: #82AAFF">toRaw</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">newVal</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_rawValue</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_rawValue</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVal</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">convert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">newVal</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">trigger</span><span style="color: #F07178">(</span><span style="color: #82AAFF">toRaw</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">SET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">value</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVal</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><code>ref</code> 实现非常简单，跟 <code>reactive</code> 大同小异，都是对属性进行拦截，get时收集依赖，set时派发更新。只不过 <code>reactive</code> 会对对象所有自身属性(除内置的)进行响应式，但 <code>ref</code> 只会对 <code>value</code> 属性进行响应式。</p>
<h2 id="effect" tabindex="-1">effect <a class="header-anchor" href="#effect" aria-label="Permalink to &quot;effect&quot;">&ZeroWidthSpace;</a></h2>
<p>上面分析 <code>reactive</code> 和 <code>ref</code>实现时，一直在说<strong>收集依赖</strong>和<strong>派发更新</strong>，我们为了使响应式对象值改变时，自动执行一段逻辑，需要用 <code>effect</code> 包裹，其实传入<code>effect</code>的函数就是依赖函数，<strong>派发更新</strong> 就是能自动执行这个函数。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> state </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">reactive</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">count</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// state.countg改变时，这个函数会自动执行。</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">state</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">count</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><p>我们只需要收集依赖的时候，知道调用了哪个函数，就可以把函数暂存起来，等着下次更新时，执行函数即可。所以在这里可以使用高阶函数，对原依赖函数进行包裹。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">effect</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">wrapperFn</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 当执行时，我们就只到此时执行的是wrapperFn</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">wrapperFn</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>所以我们可以通过全局变量，来控制当前执行的函数是哪个，从而依赖收集的时候，就知道该收集哪个函数。根据这个思路我们来看下 <code>Vue</code> 中 <code>effect</code> 的实现。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">effect</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">options</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 已经是effect包裹后的函数，需要拿到原始函数</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">isEffect</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">fn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">raw</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 通过createReactiveEffect进行包裹，相当于上面提到的wrapperFn</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">effect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">createReactiveEffect</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">fn</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">options</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// lazy代表懒执行，默认情况下会先执行一次</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">options</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">lazy</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">effect</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">effect</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><code>Vue</code> 中的 <code>effect</code> 还提供了一些参数，用于不同场景下的使用，我们可以看下<code>createReactiveEffect</code> 是如何维护依赖函数的。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createReactiveEffect</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">options</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 对原始fn进行包裹，收集依赖就是收集effect</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">effect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reactiveEffect</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 默认情况是激活状态，可以通过stop函数，effect.active设置成false</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果非激活状态，直接执行，不做任何逻辑</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">active</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">options</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">scheduler</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 当前effect调用栈中不存在此effect</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">effectStack</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">includes</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">effect</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 清空依赖，重新收集</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">cleanup</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">effect</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 激活收集依赖功能</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">enableTracking</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 将effect推入栈中</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">effectStack</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">effect</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 维护当前执行的依赖函数</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">effect</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">finally</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 将effect推出</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">effectStack</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pop</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 重置收集依赖功能</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">resetTracking</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 维护当前执行的依赖函数</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">effectStack</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">effectStack</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">id</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">uid</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">_isEffect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">active</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">raw</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">deps</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">options</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">options</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">effect</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>通过上面代码，我们知道 <code>activeEffect</code> 就是我们说的全局变量，用于维护当前正在执行的effect。那为什么还需要维护effectStack调用栈呢，主要是考虑effect嵌套问题。其中 <code>enableTracking</code> 和 <code>resetTracking</code> 俩个方法主要是维护全局变量 <code>shouldTrack</code> ，通过它来决定是否可以依赖收集，因为有些场景下，比如<strong>生命周期</strong>时。是不能收集依赖的。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> shouldTrack </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// trackStack调用栈跟effectStack同理，为了解决嵌套调用</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> trackStack </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">pauseTracking</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">trackStack</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">shouldTrack</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">shouldTrack</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">enableTracking</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">trackStack</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">shouldTrack</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">shouldTrack</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>我们现在可以知道当前执行的依赖函数了，接下来我们来看一下如果对它进行收集（track）以及派发执行（trigger）。</p>
<h2 id="track" tabindex="-1">Track <a class="header-anchor" href="#track" aria-label="Permalink to &quot;Track&quot;">&ZeroWidthSpace;</a></h2>
<p>上面提到收集依赖是调用 <code>track</code> 函数，我们就以拦截 <code>get</code> 操作中 <code>track(target, TrackOpTypes.GET, key)</code>为例，来分析 <code>track</code> 函数的实现。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">track</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">type</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// shouldTrack false 或者 当前维护的effect函数为空，都直接终止</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">shouldTrack</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 通过target找到对应依赖Map，没有即创建</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">depsMap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">targetMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">depsMap</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">targetMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">depsMap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Map</span><span style="color: #F07178">()))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 通过访问到的key找到对应的依赖set，没有即创建</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dep</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">dep</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">dep</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Set</span><span style="color: #F07178">()))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 如果依赖集合中不存在当前依赖函数，那添加进去</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">dep</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">has</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">dep</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">add</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 在依赖函数的deps中维护依赖数组，用于清除依赖时使用。</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">activeEffect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">deps</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">dep</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>我们通过 <code>target =&gt; depsMap</code> 和 <code>key =&gt; deps</code> 找到 <code>target[key]</code>对应的依赖函数集合，然后将当前执行的 <code>effect</code> 插入进去，代表依赖收集完成</p>
<h2 id="trigger" tabindex="-1">Trigger <a class="header-anchor" href="#trigger" aria-label="Permalink to &quot;Trigger&quot;">&ZeroWidthSpace;</a></h2>
<p>依赖函数都存在一个Set集合中，等到我们改变 <code>target[key]</code> 的时候，就需要将集合中的函数都执行一篇。接下来看下 <code>trigger</code> 函数的实现。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">trigger</span><span style="color: #89DDFF">(</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">type</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">newValue</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">oldValue</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">oldTarget</span></span>
<span class="line"><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 通过 target 找到 depsMap, 不存在终止</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">depsMap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">targetMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">depsMap</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 定义要执行的effect集合</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">effects</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Set</span><span style="color: #F07178">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 传入集合，将effect依次添加到待执行集合中</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">add</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">effectsToAdd</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">effectsToAdd</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">effectsToAdd</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #A6ACCD; font-style: italic">effect</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 与当前执行的effect相同不添加</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">effect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #A6ACCD">effects</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">add</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">effect</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 针对集合类型来说，如果清空集合，需要把所有依赖函数都执行</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">type</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">CLEAR</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">add</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">length</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果是数组的长度发生改变，我们只需要派发数组length或者索引大于新值的依赖函数</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 例如 arr.splice(2, 1) 只对索引2后面的元素产生影响，需要更新</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">dep</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">length</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newValue</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">add</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">dep</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果改变的key不为空，可能是 修改，添加，删除。取出对应的dep集合插入到待执行结合中</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">void</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">add</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 对于枚举属性，进行了添加、删除、map设置新属性，也都需要重新执行依赖函数</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">shouldTriggerIteration</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span></span>
<span class="line"><span style="color: #F07178">      (</span><span style="color: #A6ACCD">type</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">ADD</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span></span>
<span class="line"><span style="color: #F07178">        (</span><span style="color: #89DDFF">!</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">) </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #82AAFF">isIntegerKey</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">))) </span><span style="color: #89DDFF">||</span></span>
<span class="line"><span style="color: #F07178">      (</span><span style="color: #A6ACCD">type</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">DELETE</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">shouldTriggerIteration</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span></span>
<span class="line"><span style="color: #F07178">      (</span><span style="color: #A6ACCD">type</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">SET</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Map</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    ) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">add</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">) </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">length</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ITERATE_KEY</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">shouldTriggerIteration</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Map</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">add</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">MAP_KEY_ITERATE_KEY</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">run</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">effect</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">ReactiveEffect</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果使用effect时有传入scheduler调度函数，则执行调度函数</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">options</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">scheduler</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">options</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">scheduler</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">effect</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 否则执行函数本身</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">effect</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 依次执行依赖函数</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">effects</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">run</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><code>trigger</code> 函数就是通过不同场景，将要执行的effect函数整理出来，然后依次的去执行。参数中 <code>oldValue</code> 和 <code>oldTarget</code> 主要是用于 <code>effect</code> 传入 <code>onTrigger</code>调试函数时，作为入参提供出去。</p>
<h2 id="computed" tabindex="-1">computed <a class="header-anchor" href="#computed" aria-label="Permalink to &quot;computed&quot;">&ZeroWidthSpace;</a></h2>
<p><code>Vue</code> 中的计算属性是通过传入 <code>get</code> 函数，依赖于一个值而计算出其他值的一种API，有了前面的学习，我们很容易想到可以通过 <code>effect</code> 函数来实现，具体实现如下</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> count </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">ref</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">0</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 计算属性</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> double</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">double</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><p>通过 <code>effect</code> 副作用函数，我们可以在 <code>count</code> 值发生变化时，自动计算double值。但这样实现，我们其他想依赖<code>double</code>值的时候做不到响应式，你也可能想到把double也改成 <code>ref</code>对象，实时维护。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> count </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">ref</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">0</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 计算属性</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> double </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">ref</span><span style="color: #A6ACCD">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">double</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 依赖double</span></span>
<span class="line"><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">double</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><p>其实这已经离 <code>Vue</code> 的计算属性实现很相似了，但如果我们的 <code>double</code> 没有被其他地方使用，其实它是可以不计算的，那 <code>Vue</code> 中是如何做到的呢，我们一起来学习一下</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">computed</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">getterOrOptions</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">getter</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">setter</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 除了传入getter函数，也可以传入配置参数，里面包含get、set</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">isFunction</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">getterOrOptions</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">getter</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">getterOrOptions</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果没传入setter，直接赋值空函数，非生产环境，会提示警告</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">setter</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">__DEV__</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">warn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Write operation failed: computed value is readonly</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">getter</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">getterOrOptions</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">get</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">setter</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">getterOrOptions</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">set</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 返回通过实例化ComputedRefImpl的对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ComputedRefImpl</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">getter</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">setter</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">isFunction</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">getterOrOptions</span><span style="color: #F07178">) </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">getterOrOptions</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">set</span></span>
<span class="line"><span style="color: #F07178">  )</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><code>computed</code> 函数主要是针对俩种使用方式做了getter、setter的处理。再来看下 <code>ComputedRefImpl</code> 类的实现</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">ComputedRefImpl</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 具体值</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">_value</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 标志位，代表数据是否脏了，脏就代表需要重新计算</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">_dirty</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 副作用函数</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">effect</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">__v_isRef</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">__v_isReadonly</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">constructor</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">getter</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">_setter</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">isReadonly</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 赋值副作用函数，依赖值改变时通过调度方式再次执行，触发依赖此计算属性的effect更新</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">effect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">effect</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">getter</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// lazy: true 不会立即执行</span></span>
<span class="line"><span style="color: #F07178">      lazy</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">scheduler</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 如果已经需要计算，代表触发更新过，不再一次触发</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!this.</span><span style="color: #A6ACCD">_dirty</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_dirty</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">trigger</span><span style="color: #F07178">(</span><span style="color: #82AAFF">toRaw</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">SET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">value</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 传入自定义setter,就代表不已读</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this</span><span style="color: #F07178">[</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">__v_isReadonly</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">isReadonly</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">get</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">value</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果数据脏，需要重新执行</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_dirty</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">effect</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_dirty</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 收集依赖</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">track</span><span style="color: #F07178">(</span><span style="color: #82AAFF">toRaw</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TrackOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">GET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">value</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_value</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">set</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">value</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">newValue</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">T</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">_setter</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">newValue</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>通过 <code>effect</code> 执行来收集依赖，内部我们通过 <code>_dirty</code> 来判断是否数据需要重新计算，这样做就可以减少不必要执行计算。</p>
<h2 id="简单实现" tabindex="-1">简单实现 <a class="header-anchor" href="#简单实现" aria-label="Permalink to &quot;简单实现&quot;">&ZeroWidthSpace;</a></h2>
<p>经过上面的学习，知道其实响应式的原理很巧妙，就是通过对属性值操作拦截，来进行<strong>依赖收集</strong>和<strong>派发更新</strong>。我们来实现一个简单版的<code>reactive</code>函数，以此巩固自己学到的知识。这里指超简单的实现，不考虑异常情况，以及集合类型。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// target =&gt; depsMap</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> targetMap </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Map</span><span style="color: #A6ACCD">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// key =&gt; deps (Set集合)</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> KeyToDepMap </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Map</span><span style="color: #A6ACCD">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 当前effect</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> activeEffect </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">reactive</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">obj</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Proxy</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">obj</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    set</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">receiver</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Reflect</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">receiver</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">//</span></span></code></pre>
</div>]]></description>
            <content:encoded><![CDATA[<p>我们都知道 <code>Vue3.0</code> 将响应式部分单独抽离成 <code>reactivity</code> npm 包，并且内部用 <code>proxy</code> 代替了 <code>Object.defineProperty</code>，本文通过对源码来一起学习它是怎么工作的。</p>
<!-- more -->
<h2 id="reactive" tabindex="-1">reactive <a class="header-anchor" href="#reactive" aria-label="Permalink to &quot;reactive&quot;">&ZeroWidthSpace;</a></h2>
<p>我们先来看 <code>reactive</code> 的使用，我们传入对象、数组、Map实例、Set实例任意一种，都可以将其变成响应式，如果属性在 <code>effect</code> 函数中被使用，就会被收集依赖，当属性值变更时，就会重新执行 <code>effect</code> 函数。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> state </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">reactive</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">count</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 会执行2遍，++前后各执行一遍</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">变更时自动执行</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">state</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">count</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">state</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">++;</span></span></code></pre>
</div><p>我们直接查来看源码中的实现，具体文件是 <code>packages/reactivity/src/reactive.ts</code></p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">reactive</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 如果target是只读的，不能再进行响应式，直接返回</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">target</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span><span style="color: #F07178">[</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">__v_isReadonly</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 通过 createReactiveObject 创建响应式对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">createReactiveObject</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">mutableHandlers</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">mutableCollectionHandlers</span></span>
<span class="line"><span style="color: #F07178">  )</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>我们会先判断传入的 <code>target</code> 是否已经是只读状态了，我们通过 <code>readonly</code> 可以生成一个只读对象，该 API 会在之后进行分析，调用其方法后会拦截 <code>__v_isReadonly</code> 属性返回 <code>true</code> 。</p>
<p>其实 <code>reactive</code> , <code>readonly</code> 都是通过 <code>createReactiveObject</code> 来创建，只不过传入的参数不同而已，我们来重点看一下 <code>createReactiveObject</code> 的实现：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createReactiveObject</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">isReadonly</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">baseHandlers</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">collectionHandlers</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 不是对象直接返回 （不是对象可以使用 ref 做到响应式，后面会讲到）</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #82AAFF">isObject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">)) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 被代理过会有__v_raw属性，不需要再进行代理，直接返回</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 特例：如果对一个响应式对象再次进行只读操作，是可以的 readonly(reactive({}))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">[</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">__v_raw</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">isReadonly</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span><span style="color: #F07178">[</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">__v_isReactive</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">])) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 查看target是否被代理过，Map中存在，说明代理过，可以直接返回结果</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">proxyMap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">isReadonly</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">readonlyMap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reactiveMap</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">existingProxy</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">proxyMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">existingProxy</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">existingProxy</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 拿到target具体的类型，进行代理。集合类型会使用collectionHandlers</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">targetType</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">getTargetType</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">proxy</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Proxy</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">targetType</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TargetType</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">COLLECTION</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">collectionHandlers</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">baseHandlers</span></span>
<span class="line"><span style="color: #F07178">  )</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 代理过存在Map中，用于同target，直接返回</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">proxyMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">proxy</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">proxy</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><code>createReactiveObject</code> 函数主要做三件事情，<strong>1. 首先校验target 是否合法</strong>，<strong>2. 然后尝试从缓存中拿结果</strong>，<strong>3. 进行proxy代理</strong>。</p>
<p>响应式核心是在代理操作中，进行收集依赖或派发更新。 具体逻辑都在传入的 <code>handlers</code> 对象里面。我们这里只对对象或数组进行分析，使用的是 <code>mutableHandlers</code> 对象。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> mutableHandlers </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  get</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  set</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  deleteProperty</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  has</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  ownKeys</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>对于数组和对象，<code>reactive</code> 对以上5个操作进行了代理，每个操作中都会调用<strong>收集依赖</strong>或<strong>派发更新</strong> ， 我们先来看 <code>get</code> 操作：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> get </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createGetter</span><span style="color: #A6ACCD">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createGetter</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">isReadonly</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">shallow</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">get</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">receiver</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 对 `__v_isReactive` `__v_isReadonly` `__v_raw` 进行拦截</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 省略无关代码...</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 对数组 &#39;includes&#39;, &#39;indexOf&#39;, &#39;lastIndexOf&#39; API进行拦截，收集依赖</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 省略无关代码...</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Reflect</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">receiver</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 不是已读，需要收集依赖</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">isReadonly</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">track</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TrackOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">GET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果是浅响应式，直接返回就可以</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">shallow</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果res是Ref对象，直接返回res.value。通过数组索引获取的值不会自动 &quot;解包&quot;</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 省略无关代码...</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 不是浅响应式，返回的还是对象，需要进行响应式代理，一种懒执行优化</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">isObject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">res</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">isReadonly</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #82AAFF">readonly</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">res</span><span style="color: #F07178">) </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reactive</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">res</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>上述代码的最关键的是 <code>track(target, TrackOpTypes.GET, key)</code>，该方法就是用于收集依赖，方法的实现会再后面进行分析。在 <code>Vue2.x</code>中，嵌套对象，会在初始化时就递归进行代理操作，<code>3.0</code> 改变了这一点，当访问到时才会进行再次的代理，这也是一种优化性能的手段。</p>
<p>我们再来看下 <code>set</code> 代理操作</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> set </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createSetter</span><span style="color: #A6ACCD">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createSetter</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">shallow</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">set</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">receiver</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 旧值</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldValue</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">shallow</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 非浅响应时，如果从ref 变成 非ref，不需要派发更新</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">toRaw</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">) </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">isRef</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldValue</span><span style="color: #F07178">) </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #82AAFF">isRef</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">oldValue</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Reflect</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">receiver</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果target是原型链上的对象，不需要派发更新</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">target</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #82AAFF">toRaw</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">receiver</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// hadKey代表自身上存在该属性</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">hadKey</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">trigger</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">ADD</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">hasChanged</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldValue</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">trigger</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">SET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldValue</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>与 <code>track</code> 函数相对应的就是 <code>trigger</code> 函数，它俩分别是收集依赖，派发更新。具体实现我们放在后面结合 <code>effect</code> 函数一起分析。我们可以假想它们的工作方式如下：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> effects </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 把函数放到数组中</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> track </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> effects</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #A6ACCD">(fn)</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 遍历数组再次执行这些函数</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> tigger </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> effects</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD; font-style: italic">effect</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">())</span></span></code></pre>
</div><h2 id="readonly" tabindex="-1">readonly <a class="header-anchor" href="#readonly" aria-label="Permalink to &quot;readonly&quot;">&ZeroWidthSpace;</a></h2>
<p>上面已经说过 <code>readonly</code> 也是调用 <code>createReactiveObject</code> 来创建，第二个参数传入true，代表是只读。并且代理操作传入 <code>readonlyHandlers</code> 和<code>readonlyCollectionHandlers</code></p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">readonly</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">createReactiveObject</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">readonlyHandlers</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">readonlyCollectionHandlers</span></span>
<span class="line"><span style="color: #F07178">  )</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>我们来看下 <code>shallowReactiveHandlers</code></p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> readonlyHandlers </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">get</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createGetter</span><span style="color: #A6ACCD">(</span><span style="color: #FF9CAC">true</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  has</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  ownKeys</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">set</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">__DEV__</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">warn</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">deleteProperty</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">__DEV__</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">warn</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createGetter</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">isReadonly</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">shallow</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">get</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">receiver</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 忽略无关代码..</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Reflect</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">receiver</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 只读时，不进行依赖收集</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">isReadonly</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">track</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TrackOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">GET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>使用 <code>createGetter</code> 传入 <code>true</code>，这样在函数内部判断时，不会进行依赖收集，再设置(set)、删除(deleteProperty)时，都不进行操作，非生产环境给出警告即可。</p>
<h2 id="ref" tabindex="-1">ref <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;ref&quot;">&ZeroWidthSpace;</a></h2>
<p>因为 <code>reactive</code> 方法是通过 <code>proxy</code> 代理属性相关操作，如果我们只想对基本数据类型进行响应式，<code>reactive</code> 就没有办法实现了。<code>Vue</code> 提供的 <code>ref</code> 帮我们做了这件事情。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> number </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">ref</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 会执行2遍，++前后各执行一遍</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">变更时自动执行</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">number</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">number</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">++;</span></span></code></pre>
</div><p>我们看一下源码中是如何实现的，文件位置：<code>packages/reactivity/src/ref.ts</code></p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">ref</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">createRef</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createRef</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">rawValue</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">shallow</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 如果已经是ref对象，直接返回</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">isRef</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">rawValue</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">rawValue</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 通过实例化RefImpl类实现</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">RefImpl</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">rawValue</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">shallow</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><code>ref</code> 最后是返回通过实例化<code>RefImpl</code>类的对象，一起来看一下这个类都做了哪些事情</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> convert </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">isObject</span><span style="color: #A6ACCD">(val) </span><span style="color: #89DDFF">?</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">reactive</span><span style="color: #A6ACCD">(val) </span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> val</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">RefImpl</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 具体的值</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">_value</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 标识是ref, isRef函数实现就是监测是否存在该属性</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">__v_isRef</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">constructor</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">_rawValue</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果是对象，要使用 reactive 变成响应式</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">convert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">_rawValue</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 获取值时，进行依赖收集</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">get</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">value</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">track</span><span style="color: #F07178">(</span><span style="color: #82AAFF">toRaw</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TrackOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">GET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">value</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_value</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 值变更时，派发更新</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">set</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">value</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">newVal</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 跟上一次比较，是否有变更，变更就需要通知更新</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">hasChanged</span><span style="color: #F07178">(</span><span style="color: #82AAFF">toRaw</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">newVal</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_rawValue</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_rawValue</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVal</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">convert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">newVal</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">trigger</span><span style="color: #F07178">(</span><span style="color: #82AAFF">toRaw</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">SET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">value</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVal</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><code>ref</code> 实现非常简单，跟 <code>reactive</code> 大同小异，都是对属性进行拦截，get时收集依赖，set时派发更新。只不过 <code>reactive</code> 会对对象所有自身属性(除内置的)进行响应式，但 <code>ref</code> 只会对 <code>value</code> 属性进行响应式。</p>
<h2 id="effect" tabindex="-1">effect <a class="header-anchor" href="#effect" aria-label="Permalink to &quot;effect&quot;">&ZeroWidthSpace;</a></h2>
<p>上面分析 <code>reactive</code> 和 <code>ref</code>实现时，一直在说<strong>收集依赖</strong>和<strong>派发更新</strong>，我们为了使响应式对象值改变时，自动执行一段逻辑，需要用 <code>effect</code> 包裹，其实传入<code>effect</code>的函数就是依赖函数，<strong>派发更新</strong> 就是能自动执行这个函数。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> state </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">reactive</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">count</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// state.countg改变时，这个函数会自动执行。</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">state</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">count</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><p>我们只需要收集依赖的时候，知道调用了哪个函数，就可以把函数暂存起来，等着下次更新时，执行函数即可。所以在这里可以使用高阶函数，对原依赖函数进行包裹。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">effect</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">wrapperFn</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 当执行时，我们就只到此时执行的是wrapperFn</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">wrapperFn</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>所以我们可以通过全局变量，来控制当前执行的函数是哪个，从而依赖收集的时候，就知道该收集哪个函数。根据这个思路我们来看下 <code>Vue</code> 中 <code>effect</code> 的实现。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">effect</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">options</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 已经是effect包裹后的函数，需要拿到原始函数</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">isEffect</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">fn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">raw</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 通过createReactiveEffect进行包裹，相当于上面提到的wrapperFn</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">effect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">createReactiveEffect</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">fn</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">options</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// lazy代表懒执行，默认情况下会先执行一次</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">options</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">lazy</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">effect</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">effect</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><code>Vue</code> 中的 <code>effect</code> 还提供了一些参数，用于不同场景下的使用，我们可以看下<code>createReactiveEffect</code> 是如何维护依赖函数的。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createReactiveEffect</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">options</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 对原始fn进行包裹，收集依赖就是收集effect</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">effect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reactiveEffect</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 默认情况是激活状态，可以通过stop函数，effect.active设置成false</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果非激活状态，直接执行，不做任何逻辑</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">active</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">options</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">scheduler</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 当前effect调用栈中不存在此effect</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">effectStack</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">includes</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">effect</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 清空依赖，重新收集</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">cleanup</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">effect</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 激活收集依赖功能</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">enableTracking</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 将effect推入栈中</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">effectStack</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">effect</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 维护当前执行的依赖函数</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">effect</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">finally</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 将effect推出</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">effectStack</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pop</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 重置收集依赖功能</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">resetTracking</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 维护当前执行的依赖函数</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">effectStack</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">effectStack</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">id</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">uid</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">_isEffect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">active</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">raw</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">deps</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">options</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">options</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">effect</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>通过上面代码，我们知道 <code>activeEffect</code> 就是我们说的全局变量，用于维护当前正在执行的effect。那为什么还需要维护effectStack调用栈呢，主要是考虑effect嵌套问题。其中 <code>enableTracking</code> 和 <code>resetTracking</code> 俩个方法主要是维护全局变量 <code>shouldTrack</code> ，通过它来决定是否可以依赖收集，因为有些场景下，比如<strong>生命周期</strong>时。是不能收集依赖的。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> shouldTrack </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// trackStack调用栈跟effectStack同理，为了解决嵌套调用</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> trackStack </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">pauseTracking</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">trackStack</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">shouldTrack</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">shouldTrack</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">enableTracking</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">trackStack</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">shouldTrack</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">shouldTrack</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>我们现在可以知道当前执行的依赖函数了，接下来我们来看一下如果对它进行收集（track）以及派发执行（trigger）。</p>
<h2 id="track" tabindex="-1">Track <a class="header-anchor" href="#track" aria-label="Permalink to &quot;Track&quot;">&ZeroWidthSpace;</a></h2>
<p>上面提到收集依赖是调用 <code>track</code> 函数，我们就以拦截 <code>get</code> 操作中 <code>track(target, TrackOpTypes.GET, key)</code>为例，来分析 <code>track</code> 函数的实现。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">track</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">type</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// shouldTrack false 或者 当前维护的effect函数为空，都直接终止</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">shouldTrack</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 通过target找到对应依赖Map，没有即创建</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">depsMap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">targetMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">depsMap</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">targetMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">depsMap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Map</span><span style="color: #F07178">()))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 通过访问到的key找到对应的依赖set，没有即创建</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dep</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">dep</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">dep</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Set</span><span style="color: #F07178">()))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 如果依赖集合中不存在当前依赖函数，那添加进去</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">dep</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">has</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">dep</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">add</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 在依赖函数的deps中维护依赖数组，用于清除依赖时使用。</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">activeEffect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">deps</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">dep</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>我们通过 <code>target =&gt; depsMap</code> 和 <code>key =&gt; deps</code> 找到 <code>target[key]</code>对应的依赖函数集合，然后将当前执行的 <code>effect</code> 插入进去，代表依赖收集完成</p>
<h2 id="trigger" tabindex="-1">Trigger <a class="header-anchor" href="#trigger" aria-label="Permalink to &quot;Trigger&quot;">&ZeroWidthSpace;</a></h2>
<p>依赖函数都存在一个Set集合中，等到我们改变 <code>target[key]</code> 的时候，就需要将集合中的函数都执行一篇。接下来看下 <code>trigger</code> 函数的实现。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">trigger</span><span style="color: #89DDFF">(</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">type</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">newValue</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">oldValue</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">oldTarget</span></span>
<span class="line"><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 通过 target 找到 depsMap, 不存在终止</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">depsMap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">targetMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">depsMap</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 定义要执行的effect集合</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">effects</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Set</span><span style="color: #F07178">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 传入集合，将effect依次添加到待执行集合中</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">add</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">effectsToAdd</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">effectsToAdd</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">effectsToAdd</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #A6ACCD; font-style: italic">effect</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 与当前执行的effect相同不添加</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">effect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #A6ACCD">effects</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">add</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">effect</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 针对集合类型来说，如果清空集合，需要把所有依赖函数都执行</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">type</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">CLEAR</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">add</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">length</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果是数组的长度发生改变，我们只需要派发数组length或者索引大于新值的依赖函数</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 例如 arr.splice(2, 1) 只对索引2后面的元素产生影响，需要更新</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">dep</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">length</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newValue</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">add</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">dep</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果改变的key不为空，可能是 修改，添加，删除。取出对应的dep集合插入到待执行结合中</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">void</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">add</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 对于枚举属性，进行了添加、删除、map设置新属性，也都需要重新执行依赖函数</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">shouldTriggerIteration</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span></span>
<span class="line"><span style="color: #F07178">      (</span><span style="color: #A6ACCD">type</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">ADD</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span></span>
<span class="line"><span style="color: #F07178">        (</span><span style="color: #89DDFF">!</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">) </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #82AAFF">isIntegerKey</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">))) </span><span style="color: #89DDFF">||</span></span>
<span class="line"><span style="color: #F07178">      (</span><span style="color: #A6ACCD">type</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">DELETE</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">shouldTriggerIteration</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span></span>
<span class="line"><span style="color: #F07178">      (</span><span style="color: #A6ACCD">type</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">SET</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Map</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    ) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">add</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">) </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">length</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ITERATE_KEY</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">shouldTriggerIteration</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Map</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">add</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">MAP_KEY_ITERATE_KEY</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">run</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">effect</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">ReactiveEffect</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果使用effect时有传入scheduler调度函数，则执行调度函数</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">options</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">scheduler</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">effect</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">options</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">scheduler</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">effect</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 否则执行函数本身</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">effect</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 依次执行依赖函数</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">effects</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">run</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><code>trigger</code> 函数就是通过不同场景，将要执行的effect函数整理出来，然后依次的去执行。参数中 <code>oldValue</code> 和 <code>oldTarget</code> 主要是用于 <code>effect</code> 传入 <code>onTrigger</code>调试函数时，作为入参提供出去。</p>
<h2 id="computed" tabindex="-1">computed <a class="header-anchor" href="#computed" aria-label="Permalink to &quot;computed&quot;">&ZeroWidthSpace;</a></h2>
<p><code>Vue</code> 中的计算属性是通过传入 <code>get</code> 函数，依赖于一个值而计算出其他值的一种API，有了前面的学习，我们很容易想到可以通过 <code>effect</code> 函数来实现，具体实现如下</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> count </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">ref</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">0</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 计算属性</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> double</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">double</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><p>通过 <code>effect</code> 副作用函数，我们可以在 <code>count</code> 值发生变化时，自动计算double值。但这样实现，我们其他想依赖<code>double</code>值的时候做不到响应式，你也可能想到把double也改成 <code>ref</code>对象，实时维护。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> count </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">ref</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">0</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 计算属性</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> double </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">ref</span><span style="color: #A6ACCD">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">double</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 依赖double</span></span>
<span class="line"><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">double</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><p>其实这已经离 <code>Vue</code> 的计算属性实现很相似了，但如果我们的 <code>double</code> 没有被其他地方使用，其实它是可以不计算的，那 <code>Vue</code> 中是如何做到的呢，我们一起来学习一下</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">computed</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">getterOrOptions</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">getter</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">setter</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 除了传入getter函数，也可以传入配置参数，里面包含get、set</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">isFunction</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">getterOrOptions</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">getter</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">getterOrOptions</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果没传入setter，直接赋值空函数，非生产环境，会提示警告</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">setter</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">__DEV__</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">warn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Write operation failed: computed value is readonly</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">getter</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">getterOrOptions</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">get</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">setter</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">getterOrOptions</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">set</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 返回通过实例化ComputedRefImpl的对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ComputedRefImpl</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">getter</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">setter</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">isFunction</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">getterOrOptions</span><span style="color: #F07178">) </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">getterOrOptions</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">set</span></span>
<span class="line"><span style="color: #F07178">  )</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><code>computed</code> 函数主要是针对俩种使用方式做了getter、setter的处理。再来看下 <code>ComputedRefImpl</code> 类的实现</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">ComputedRefImpl</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 具体值</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">_value</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 标志位，代表数据是否脏了，脏就代表需要重新计算</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">_dirty</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 副作用函数</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">effect</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">__v_isRef</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">__v_isReadonly</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">constructor</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">getter</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">_setter</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">isReadonly</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 赋值副作用函数，依赖值改变时通过调度方式再次执行，触发依赖此计算属性的effect更新</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">effect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">effect</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">getter</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// lazy: true 不会立即执行</span></span>
<span class="line"><span style="color: #F07178">      lazy</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">scheduler</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 如果已经需要计算，代表触发更新过，不再一次触发</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!this.</span><span style="color: #A6ACCD">_dirty</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_dirty</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">trigger</span><span style="color: #F07178">(</span><span style="color: #82AAFF">toRaw</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">SET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">value</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 传入自定义setter,就代表不已读</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this</span><span style="color: #F07178">[</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">__v_isReadonly</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">isReadonly</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">get</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">value</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果数据脏，需要重新执行</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_dirty</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">effect</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_dirty</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 收集依赖</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">track</span><span style="color: #F07178">(</span><span style="color: #82AAFF">toRaw</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TrackOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">GET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">value</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_value</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">set</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">value</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">newValue</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">T</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">_setter</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">newValue</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>通过 <code>effect</code> 执行来收集依赖，内部我们通过 <code>_dirty</code> 来判断是否数据需要重新计算，这样做就可以减少不必要执行计算。</p>
<h2 id="简单实现" tabindex="-1">简单实现 <a class="header-anchor" href="#简单实现" aria-label="Permalink to &quot;简单实现&quot;">&ZeroWidthSpace;</a></h2>
<p>经过上面的学习，知道其实响应式的原理很巧妙，就是通过对属性值操作拦截，来进行<strong>依赖收集</strong>和<strong>派发更新</strong>。我们来实现一个简单版的<code>reactive</code>函数，以此巩固自己学到的知识。这里指超简单的实现，不考虑异常情况，以及集合类型。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// target =&gt; depsMap</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> targetMap </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Map</span><span style="color: #A6ACCD">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// key =&gt; deps (Set集合)</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> KeyToDepMap </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Map</span><span style="color: #A6ACCD">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 当前effect</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> activeEffect </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">reactive</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">obj</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Proxy</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">obj</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    set</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">receiver</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Reflect</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">receiver</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// ---------------------------------------派发更新</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">depsMap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">targetMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">depsMap</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #A6ACCD; font-style: italic">effect</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178">  </span><span style="color: #82AAFF">effect</span><span style="color: #F07178">())</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// ---------------------------------------</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    get</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">receiver</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// ---------------------------------------收集依赖</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">depsMap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">targetMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">depsMap</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">targetMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">depsMap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Map</span><span style="color: #F07178">()))</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dep</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">dep</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">dep</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Set</span><span style="color: #F07178">()))</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">depsMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">has</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">dep</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">add</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// ---------------------------------------</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Reflect</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">receiver</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">effect</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">wrapperFn</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">wrapperFn</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">activeEffect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">wrapperFn</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// test</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> person </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">reactive</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">lihaoze</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">age</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">18</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 依次执行 lihaoze cq</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">名字：</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">person</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">name</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #82AAFF">effect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 依次执行 18 24</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">年龄</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">person</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">age</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">person</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">name </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">cq</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">person</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">age </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">24</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">&ZeroWidthSpace;</a></h2>
<p>本文的分析只是 <code>@vue/reactivity</code> 的冰山一角，其中关于集合类型的操作拦截，<code>effect</code> 调度方式执行等都没有说明，感兴趣的伙伴可以自行去学习。<code>Vue</code> 也是现在面试中常被问到的一点，对于掌握其中部分知识点也有助于我们更好的展现自己。如果本文对你有帮助，希望给与点赞一下，谢谢。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SWR React Hooks 库源码阅读]]></title>
            <link>https://ihaoze.cn/blog//posts/react-swr-peel</link>
            <guid>https://ihaoze.cn/blog//posts/react-swr-peel</guid>
            <pubDate>Fri, 21 Aug 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[<p><code>SWR</code> 库是请求远程数据的 React Hooks ，它可以更好地帮助我们管理请求，它有很多特性，其中包括但不仅限于<strong>页面聚焦重新取数</strong>、<strong>对数据的缓存</strong>、<strong>轮询</strong>、<strong>请求去重</strong>等等。<code>SWR</code>开源以来收获大量 star ，本文通过对源码阅读，来一起学习它。</p>
<!-- more -->
]]></description>
            <content:encoded><![CDATA[<p><code>SWR</code> 库是请求远程数据的 React Hooks ，它可以更好地帮助我们管理请求，它有很多特性，其中包括但不仅限于<strong>页面聚焦重新取数</strong>、<strong>对数据的缓存</strong>、<strong>轮询</strong>、<strong>请求去重</strong>等等。<code>SWR</code>开源以来收获大量 star ，本文通过对源码阅读，来一起学习它。</p>
<!-- more -->
<hr>
<p><code>useSWR</code> 的源码有710行代码，如果我们从头开始逐行的去阅读，可能会产生很多困扰，很可能导致我们半途而废，这也是读源码的大忌。所以我们将按照 <code>useSWR</code> 的功能来分模块儿的去阅读，这样不仅能每次的减少阅读量，还能对每个功能点认知更加清楚。<strong>全部代码解析请前往<a href="https://github.com/super-wall/swr" target="_blank" rel="noreferrer">GitHub</a></strong></p>
<h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">&ZeroWidthSpace;</a></h2>
<p>配置可以通过俩种方式来设置，<strong>1</strong>. 使用 <code>SWRConfig</code> 全局配置 <strong>2</strong>. 使用 <code>useSWR</code> 时局部配置，使用代码如下：</p>
<div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 1. SWRConfig 全局配置</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">App</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">SWRConfig</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #C792EA">value</span><span style="color: #89DDFF">={{</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #F07178">refreshInterval</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3000</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #82AAFF">fetcher</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(...</span><span style="color: #A6ACCD; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">fetch</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">args)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">json</span><span style="color: #A6ACCD">())</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">}}</span></span>
<span class="line"><span style="color: #89DDFF">    &gt;</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">SomeComponent</span><span style="color: #89DDFF"> /&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #FFCB6B">SWRConfig</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #F07178">  )</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 2. 局部配置 第2或第3个参数，可以省略fetcher函数</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> data </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useSWR</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/api/user</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> fetcher</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">refreshInterval</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3000</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> data </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useSWR</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/api/user</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">refreshInterval</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3000</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><p>我们来看一下 <code>useSWR</code> 内部的配置合并代码</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useSWR</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">config</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">config</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">assign</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{},</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">defaultConfig</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useContext</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">SWRConfigContext</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">config</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> SWRConfig </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> SWRConfigContext</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Provider</span></span></code></pre>
</div><p>上述代码一目了然，可以看到内部是通过 <code>Object.assign</code> API 将三个配置合并成一个对象，全局配置就是通过 <code>React Context</code> 实现，局部配置就是调用时传入的配置对象。</p>
<p>优先级关系是 <strong>默认配置 &lt; 全局配置 &lt; 局部配置</strong>。</p>
<p>默认配置的解析可以看<strong>文章末尾附录</strong>部分，标注了详细注释。</p>
<h2 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-label="Permalink to &quot;缓存&quot;">&ZeroWidthSpace;</a></h2>
<p><code>useSWR</code> 会根据传入的第一个参数生成key，来缓存请求后的结果或错误，这样就可以做到请求结果返回前，先使用缓存数据。我们不看源代码也应该可以想到，缓存就是通过 <code>Map</code> 来实现。 <code>SWR</code> 库实现了一个缓存类，其实现非常简单。这里值得提的就是<strong>序列化key</strong>的方法 <code>serializeKey</code> , 其他方法具体实现可以查看<a href="https://github.com/super-wall/swr/blob/peel/src/cache.ts" target="_blank" rel="noreferrer">github</a></p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// &gt;&gt; src/cache.ts</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Cache</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">constructor</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">initialData</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{})</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 缓存Map，可以传初始缓存对象</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">__cache</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Map</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">entries</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">initialData</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 订阅者函数数组</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">__listeners</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 根据key获取缓存</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">get</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 设置对应key的缓存值，并且执行订阅者函数</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">set</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 获取所有key的数组</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">keys</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 查看是否存在对应key的缓存值</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">has</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 清空缓存，并且执行订阅者函数</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">clear</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 删除对应key的缓存，并且执行订阅者函数</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">delete</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 添加订阅者函数到数组中，返回取消订阅的函数(从数组中移除)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">subscribe</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">listener</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 循环订阅者函数数组，执行函数。</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">private</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">notify</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 对传入的key进行序列化</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">serializeKey</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">args</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">//  传入函数直接执行拿到key</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">key</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">err</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 函数中报错，可能是因为依赖取数还没有准备好导致的</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;&#39;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果是数组，代表都是参数</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">args</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 使用 hash 方法根据数组生成字符串</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">hash</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 转换成字符串，null =&gt; &#39;&#39;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">String</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 错误的key加上err@前缀</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">errorKey</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">err@</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">args</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">errorKey</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>其中 <code>hash</code> 方法是根据数组的元素，进行拼接得到一个key字符串，具体实现可以看<strong>文章末尾附录</strong>部分</p>
<h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> data</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> error</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> isValidating</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> mutate </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useSWR</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/api/user</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> fetcher)</span></span></code></pre>
</div><p>如果我们在组件中进行异步数据获取，都是在<strong>挂载阶段</strong>请求，使用 <code>React Hooks</code> ，我们可以用 <code>useEffect</code> 依赖项传入空数组来模拟 <code>ComponentDidMount</code> 阶段。为了使请求提前，我们可以使用 <code>useLayoutEffect</code> 代替 <code>useEffect</code> ， 但为了兼容 <code>SSR</code> 环境，我们可以根据环境使用不同的 <code>API</code> 。下面是精简后的代码：</p>
<div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 尽量将请求时机提前，考虑到SSR, 浏览器客户端使用useLayoutEffect，服务端使用useEffect</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> useIsomorphicLayoutEffect </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> IS_SERVER </span><span style="color: #89DDFF">?</span><span style="color: #A6ACCD"> useEffect </span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> useLayoutEffect</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useSWR</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">config</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 初始值（可能为空），先通过请求标识符尝试取缓存，不存在使用配置中的初始值</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">initialData</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cache</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">initialData</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 初始错误，通过错误标识符取缓存</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">initialError</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cache</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">keyErr</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 状态值</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">stateRef</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useRef</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    data</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">initialData</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    error</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">initialError</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    isValidating</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 取数逻辑，会在后面详细分析</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">revalidate</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useCallback</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">/*...*/</span><span style="color: #F07178"> </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> [])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 模拟DidMount，做一次取数（请求）</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">useIsomorphicLayoutEffect</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 请求标识符key有值后，需要标记为组件已挂载</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">unmountedRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 组件挂载后，我们需要更新从缓存更新数据，并且触发重新取数</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">latestKeyedData</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cache</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">initialData</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 会清除重复数据的重新取数，一定间隔内，会保存请求，碰到重复的，直接使用之前的。</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">softRevalidate</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">revalidate</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{</span><span style="color: #F07178"> dedupe</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 触发重新取数，选项挂载请求为true 或者 没设置“初始值”和“挂载请求”</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果显式的设置了“挂载请求”为false，初始值没有也不会触发</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">revalidateOnMount</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span></span>
<span class="line"><span style="color: #F07178">      (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">initialData</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">revalidateOnMount</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    ) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">latestKeyedData</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 优化：如果有缓存数据，利用requestIdleCallback API 在浏览器空闲时间重新取数，以免阻塞渲染</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">rIC</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">softRevalidate</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 没有缓存数据，就必须直接取数</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">softRevalidate</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 标记为卸载</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">unmountedRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">revalidate</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>上述代码是在挂载阶段，默认会进行一次请求。如果显式的设置了<code> config.revalidateOnMount</code> 为 <code>false</code> ，挂载阶段是不会执行的。可以看到，开始会尝试从缓存中取值，如果不存在就使用配置中的初始值，如果最后值不为空，那我们不着急请求，所以这里可以进行优化（因为页面不会显示空白），使用 <code>requestIdleCallback</code> API 在 浏览器空闲阶段执行。其中 <code>rIC</code> 方法如下</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 不支持requestIdleCallback，用setTimeout模拟</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> rIC </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> IS_SERVER</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">?</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> window[</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">requestIdleCallback</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">] </span><span style="color: #89DDFF">||</span><span style="color: #A6ACCD"> (</span><span style="color: #A6ACCD; font-style: italic">f</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">setTimeout</span><span style="color: #A6ACCD">(f</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD">))</span></span></code></pre>
</div><h2 id="取数请求逻辑" tabindex="-1">取数请求逻辑 <a class="header-anchor" href="#取数请求逻辑" aria-label="Permalink to &quot;取数请求逻辑&quot;">&ZeroWidthSpace;</a></h2>
<p>我们接下来看 <code>revalidate</code>，<code>softRevalidate</code> 的具体实现。其实它的作用主要执行传进来的 <code>fetcher</code>，然后改变 <code>stateRef</code>，最后触发组件渲染。我们来看下精简后的代码</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 用于强制渲染</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> rerender </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useState</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">null</span><span style="color: #A6ACCD">)[</span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 类似于redux的dispatch 用于更新state(data, error, isValidating)</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> dispatch </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useCallback</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD; font-style: italic">payload</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">payload</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">stateRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">payload</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 组件已卸载</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">unmountedRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 强制渲染</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">rerender</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> [])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 重新取数，返回布尔值Promise</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> revalidate </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">revalidateOpts</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 请求标识符或请求函数不存在直接返回false</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 组件已卸载返回false</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">unmountedRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">dispatch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      isValidating</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newData</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">startAt</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 执行请求，将Promise存在CONCURRENT_PROMISES对象中</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">CONCURRENT_PROMISES</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">fnArgs</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 将请求结果赋值给newData</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">newData</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">CONCURRENT_PROMISES</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 将结果缓存起来</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">cache</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newData</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">cache</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">keyErr</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 为dispatch函数创建新的state</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newState</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      isValidating</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 此次请求没有发生错误，如果之前是错误，需要修改</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">stateRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">error</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">newState</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">error</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 请求结果不相等时(深度比较)，更新</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">compare</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">stateRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">data</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newData</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">newState</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newData</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 更新state，触发渲染。</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">dispatch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">newState</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">err</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 捕获错误</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 缓存设置错误</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">cache</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">keyErr</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">err</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 发生错误不同，更新state</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">stateRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">error</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">err</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">dispatch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        isValidating</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">        error</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">err</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>上述代码是 <code>revalidate</code> 方法精简代码，<code>softRevalidate</code> 方法只是传入的参数不同， <code>{ dedupe: true }</code> 代表去重，每次执行请求都会保存短时间，当这段时间内，相同的请求被触发，会直接使用之前的，而不会重新请求。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 会清除重复数据的重新取数，一定间隔内，会保存请求，碰到重复的，直接使用之前的。</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> softRevalidate </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">revalidate</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">dedupe</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> revalidate </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">revalidateOpts</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 忽略无关代码...</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 是否可以使用重复请求。我们执行传入的fetcher，会把Promise暂存在CONCURRENT_PROMISES对象上</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">shouldDeduping</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">CONCURRENT_PROMISES</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">revalidateOpts</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">dedupe</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 已经有一个正在进行的请求，需要去重，直接使用之前的就可以。</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">shouldDeduping</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">newData</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">CONCURRENT_PROMISES</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 执行请求，将Promise存在CONCURRENT_PROMISES对象中</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">CONCURRENT_PROMISES</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">fnArgs</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// config.dedupingInterval 时间后，删除此次请求，这段时间内，如果开启了dedupe，都可以直接用</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">delete</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">CONCURRENT_PROMISES</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">dedupingInterval</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="页面可见时重新取数" tabindex="-1">页面可见时重新取数 <a class="header-anchor" href="#页面可见时重新取数" aria-label="Permalink to &quot;页面可见时重新取数&quot;">&ZeroWidthSpace;</a></h2>
<p><code>useSWR</code>可以做到在页面<strong>重新可见</strong>时，自动重新取数(请求)，我们也可以传入配置 <code>config.revalidateOnFocus</code> 为 <code>false</code> 来取消这个特性。 <code>useSWR</code>内部是通过监听 <code>visibilitychange</code> 和 <code>focus</code> 时，重新执行 <code>softRevalidate</code> 实现的。具体代码如下：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 存储页面可见时的回调函数  key =&gt; callback[]</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> FOCUS_REVALIDATORS </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 执行对象上对应key的函数。</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> revalidate </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">revalidators</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 页面可见性(visibilitychange、focus)时，重新取数</span></span>
<span class="line"><span style="color: #A6ACCD">window</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addEventListener</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">visibilitychange</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">revalidate</span><span style="color: #A6ACCD">(FOCUS_REVALIDATORS)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">window</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addEventListener</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">focus</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">revalidate</span><span style="color: #A6ACCD">(FOCUS_REVALIDATORS)</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useSWR</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">config</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 忽略无关代码...</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">useIsomorphicLayoutEffect</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 页面可见时回调，因为focus、visibilitychange可能会同时触发，所以做了节流操作</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pending</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onFocus</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">pending</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">configRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">revalidateOnFocus</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">pending</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">softRevalidate</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">pending</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">configRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">focusThrottleInterval</span></span>
<span class="line"><span style="color: #F07178">      )</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 往FOCUS_REVALIDATORS对象上添加重新取数的回调</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 具体实现可以看文章末尾附录</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">addRevalidator</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">FOCUS_REVALIDATORS</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onFocus</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">revalidate</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>我们在挂载阶段，需要往指定对象上添加对应的订阅者(回调函数)，然后监听页面可见的事件后，执行对应的回调。</p>
<h2 id="浏览器网络重新连接时重新取数" tabindex="-1">浏览器网络重新连接时重新取数 <a class="header-anchor" href="#浏览器网络重新连接时重新取数" aria-label="Permalink to &quot;浏览器网络重新连接时重新取数&quot;">&ZeroWidthSpace;</a></h2>
<p>知道了 <code>useSWR</code> 如何做到页面可见时重新取数后，我们也就知道它是如何做到网络重新连接时重新取数的逻辑，其实就是监听的事件不同罢了</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 浏览器网络重新连接时的回调函数  key =&gt; callback[]</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> RECONNECT_REVALIDATORS </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 执行对象上对应key的函数。</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> revalidate </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">revalidators</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 当浏览器能够访问网络, 重新取数</span></span>
<span class="line"><span style="color: #A6ACCD">window</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addEventListener</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">online</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">revalidate</span><span style="color: #A6ACCD">(RECONNECT_REVALIDATORS)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useSWR</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">config</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 忽略无关代码...</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">useIsomorphicLayoutEffect</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 浏览器可访问网络时回调</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onReconnect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">configRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">revalidateOnReconnect</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">softRevalidate</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 往FOCUS_REVALIDATORS对象上添加重新取数的回调</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 具体实现可以看文章末尾附录</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">addRevalidator</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">RECONNECT_REVALIDATORS</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onReconnect</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">revalidate</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="轮询" tabindex="-1">轮询 <a class="header-anchor" href="#轮询" aria-label="Permalink to &quot;轮询&quot;">&ZeroWidthSpace;</a></h2>
<p>要实现轮询，只要使用setTimeout频繁的触发请求就可以，<code>useSWR</code> 默认配置中 <code>refreshInterval</code> 为0，代表不会触发请求，当设置大于0，才会按照设置的时间间隔进行请求。默认情况下，如果请求发生错误，或者页面不可见，无网络等情况都不会轮询（通常情况下这些时候是没必要的）。但我们可以通过设置 <code>refreshWhenHidden</code> 或 <code>refreshWhenOffline</code> 为 <code>true</code> 可以继续轮询。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 轮询，依赖项：refreshInterval(轮询间隔)、refreshWhenHidden(页面不可见时是否刷新)、refreshWhenOffline(无网络情况是否刷新)</span></span>
<span class="line"><span style="color: #82AAFF">useIsomorphicLayoutEffect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">tick</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #C792EA">async</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 默认：发生错误 或者 页面不可见 或者 无网络情况 都不会重新取数</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 设置 refreshWhenHidden、refreshWhenOffline为true，也会触发取数</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">stateRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">error</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span></span>
<span class="line"><span style="color: #F07178">      (</span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">refreshWhenHidden</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #82AAFF">isDocumentVisible</span><span style="color: #F07178">()) </span><span style="color: #89DDFF">&amp;&amp;</span></span>
<span class="line"><span style="color: #F07178">      (</span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">refreshWhenOffline</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #82AAFF">isOnline</span><span style="color: #F07178">())</span></span>
<span class="line"><span style="color: #F07178">    ) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 就是softRevalidate，去重取数</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #F07178"> </span><span style="color: #82AAFF">revalidate</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{</span><span style="color: #F07178"> dedupe</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 继续轮询</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">refreshInterval</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">tick</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">refreshInterval</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// config.refreshInterval默认是0，所以不会轮询。每次轮询都会执行tick函数</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">refreshInterval</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">tick</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">refreshInterval</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 返回清理函数</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">timer</span><span style="color: #F07178">) </span><span style="color: #82AAFF">clearTimeout</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">timer</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">  config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">refreshInterval</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">refreshWhenHidden</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">refreshWhenOffline</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  revalidate</span></span>
<span class="line"><span style="color: #A6ACCD">])</span></span></code></pre>
</div><h2 id="suspense模式" tabindex="-1">Suspense模式 <a class="header-anchor" href="#suspense模式" aria-label="Permalink to &quot;Suspense模式&quot;">&ZeroWidthSpace;</a></h2>
<p>实现Suspense模式，我们只需要将请求的Promise当错误抛出，剩下的交给 <code>React</code> 处理就好。</p>
<div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useSWR</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">config</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 忽略无关代码...</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 异步组件 suspense模式，它应该是被暂停等待的</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">suspense</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 尝试从缓存中取值</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">latestData</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cache</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">latestError</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cache</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">keyErr</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 缓存不存在时，使用初始值。</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">latestData</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">latestData</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">initialData</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">latestError</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">latestError</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">initialError</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">latestData</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">latestError</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #F07178">    ) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 如果还没有发起请求，需要开始进行请求</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">CONCURRENT_PROMISES</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">revalidate</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">CONCURRENT_PROMISES</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&amp;&amp;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">CONCURRENT_PROMISES</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">then</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #F07178">      ) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 如果是promise，直接抛出promise错误，实现suspense</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">CONCURRENT_PROMISES</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 如果是普通值，直接返回</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">latestData</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">CONCURRENT_PROMISES</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 在suspense模式下，如果没有内容则抛出错误</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">latestData</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">latestError</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">latestError</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 从缓存返回最新数据/错误，以防“key”已更改</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      error</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">latestError</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      data</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">latestData</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      isValidating</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">stateRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">isValidating</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="知识点总结" tabindex="-1">知识点总结 <a class="header-anchor" href="#知识点总结" aria-label="Permalink to &quot;知识点总结&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="利用-uselayouteffect-使时机提前" tabindex="-1">利用 <code>useLayoutEffect</code> 使时机提前 <a class="header-anchor" href="#利用-uselayouteffect-使时机提前" aria-label="Permalink to &quot;利用 `useLayoutEffect` 使时机提前&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>为了将请求时机提前，请求逻辑放在了 UI 渲染前（使用 <code>useLayoutEffect</code>），并兼容了服务端场景（使用 <code>useEffect</code>）</p>
</blockquote>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> useIsomorphicLayoutEffect </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> IS_SERVER </span><span style="color: #89DDFF">?</span><span style="color: #A6ACCD"> useEffect </span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> useLayoutEffect</span></span></code></pre>
</div><h3 id="利用-requestidlecallback-不阻止渲染。" tabindex="-1">利用 <code>requestIdleCallback</code> 不阻止渲染。 <a class="header-anchor" href="#利用-requestidlecallback-不阻止渲染。" aria-label="Permalink to &quot;利用 `requestIdleCallback` 不阻止渲染。&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>当请求存在缓存时，利用 <code>requestIdleCallback</code> 使取数发生在浏览器空闲时间，以免阻止渲染。</p>
</blockquote>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 不支持requestIdleCallback，用setTimeout模拟</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> rIC </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> IS_SERVER </span><span style="color: #89DDFF">?</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">null</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> window[</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">requestIdleCallback</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">] </span><span style="color: #89DDFF">||</span><span style="color: #A6ACCD"> (</span><span style="color: #A6ACCD; font-style: italic">f</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">setTimeout</span><span style="color: #A6ACCD">(f</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD">))</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #A6ACCD"> latestKeyedData </span><span style="color: #89DDFF">!==</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 优化：如果有缓存数据，利用requestIdleCallback API 在浏览器空闲时间重新取数，以免阻塞渲染</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">rIC</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">softRevalidate</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 没有缓存数据，就必须直接取数</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">softRevalidate</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h3 id="尽量减少渲染次数" tabindex="-1">尽量减少渲染次数 <a class="header-anchor" href="#尽量减少渲染次数" aria-label="Permalink to &quot;尽量减少渲染次数&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>通过 <code>Object.defineProperty</code> 对属性get进行拦截，修改是否被依赖的标志位 <code>stateDependencies</code>。当没被依赖的属性更新时，可以做到不渲染（减少渲染次数）。</p>
</blockquote>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 标志位，为true代表被调用者使用</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> stateDependencies </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useRef</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">data</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">error</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">isValidating</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 请求标识符key可能发生变化，所以key不相等时，返回初始的值</span></span>
<span class="line"><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">defineProperties</span><span style="color: #A6ACCD">(state</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">error</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #82AAFF">get</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">stateDependencies</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">error</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">keyRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">stateRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">error</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">initialError</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">enumerable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">data</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #82AAFF">get</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">stateDependencies</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">keyRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">stateRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">initialData</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">enumerable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">isValidating</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #82AAFF">get</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">stateDependencies</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">isValidating</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">stateRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">isValidating</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">enumerable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 请求结束后会调用的dispatch函数</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> dispatch </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">payload</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">shouldUpdateState</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">payload</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">stateRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">payload</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果调用者被依赖（有使用），则应该触发更新</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">stateDependencies</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">shouldUpdateState</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 如果改变的属性存在依赖关系 或者是 suspense模式</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">shouldUpdateState</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">suspense</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 组件已卸载</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">unmountedRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 强制渲染</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">rerender</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><strong>在改变时，需要判断改变的值是否有被使用，没有的话，是不会强制渲染的</strong></p>
<h3 id="usedebugvalue使用" tabindex="-1"><code>useDebugValue</code>使用 <a class="header-anchor" href="#usedebugvalue使用" aria-label="Permalink to &quot;`useDebugValue`使用&quot;">&ZeroWidthSpace;</a></h3>
<p>使用自定义 <code>Hook</code> 时，可以使用 <code>useDebugValue</code> 在 <code>React</code> 开发者工具中进行查看，值取决于你传入什么。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// React DevTools debugger 显示state的data</span></span>
<span class="line"><span style="color: #82AAFF">useDebugValue</span><span style="color: #A6ACCD">(stateRef</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">data)</span></span></code></pre>
</div><h3 id="判断页面可见、网络连接、连接速度" tabindex="-1">判断页面可见、网络连接、连接速度 <a class="header-anchor" href="#判断页面可见、网络连接、连接速度" aria-label="Permalink to &quot;判断页面可见、网络连接、连接速度&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 页面是否可见</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> isDocumentVisible </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> document</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">visibilityState </span><span style="color: #89DDFF">!==</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">hidden</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 浏览器是否有网络</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> isOnline </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> navigator</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">onLine</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 连接速度</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> speed </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> navigator</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">connection</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">effectiveType</span></span></code></pre>
</div><h2 id="附录" tabindex="-1">附录 <a class="header-anchor" href="#附录" aria-label="Permalink to &quot;附录&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="默认配置-defaultconfig" tabindex="-1">默认配置 defaultConfig <a class="header-anchor" href="#默认配置-defaultconfig" aria-label="Permalink to &quot;默认配置 defaultConfig&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 默认配置，其中需要基于浏览器网络状态调整配置，slowConnection代表网络连接慢的情况</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> defaultConfig </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 事件回调</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #82AAFF">onLoadingSlow</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{},</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 超时</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #82AAFF">onSuccess</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{},</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 成功</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #82AAFF">onError</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{},</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 发生错误</span></span>
<span class="line"><span style="color: #A6ACCD">  onErrorRetry</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 发生错误重试</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 错误重试间隔</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">errorRetryInterval</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> (slowConnection </span><span style="color: #89DDFF">?</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">10</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">5</span><span style="color: #A6ACCD">) </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1000</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 页面可见时请求节流间隔</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">focusThrottleInterval</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">5</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1000</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 重复数据存在的间隔，</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">dedupingInterval</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1000</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 请求超时时间</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">loadingTimeout</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> (slowConnection </span><span style="color: #89DDFF">?</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">5</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #A6ACCD">) </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1000</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 刷新数据间隔，0代表不刷新</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">refreshInterval</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 页面可见时是否需要重新请求</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">revalidateOnFocus</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 浏览器网络重新连接时是否需要重新请求</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">revalidateOnReconnect</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 页面不可见时，是否需要刷新</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">refreshWhenHidden</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 浏览器无网络时，是否需要刷新</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">refreshWhenOffline</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 发生错误后是否进行重试</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">shouldRetryOnError</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 是否是Concurrent模式</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">suspense</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 比较data值函数，默认是深比较</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">compare</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> deepEqual</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h3 id="addrevalidator-和-removerevalidator" tabindex="-1">addRevalidator 和 removeRevalidator <a class="header-anchor" href="#addrevalidator-和-removerevalidator" aria-label="Permalink to &quot;addRevalidator 和 removeRevalidator&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 往全局对象上添加重新取数的回调</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 一个key对应多个回调，所以是数组。</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> addRevalidator </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">revalidators</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">callback</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">callback</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">revalidators</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">revalidators</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">callback</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">revalidators</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">callback</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 从全局Map上移除重新取数的回调</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> removeRevalidator </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">revlidators</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">callback</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">revlidators</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">revalidators</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">revlidators</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">index</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">revalidators</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">indexOf</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">callback</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">index</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// https://jsperf.com/array-remove-by-index</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 将最后一个回调移至待删除位置，然后删除最后一位，比splice要快速</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">revalidators</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">index</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">revalidators</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">revalidators</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">revalidators</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pop</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://juejin.im/post/6844903991730503687" target="_blank" rel="noreferrer">精读《Hooks 取数 - swr 源码》</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[实现Promise，遵循Promise/A+规范]]></title>
            <link>https://ihaoze.cn/blog//posts/promise</link>
            <guid>https://ihaoze.cn/blog//posts/promise</guid>
            <pubDate>Mon, 13 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Promise 是异步编程的一种解决方案，比传统的解决方案(回调函数和事件)更合理和更强大。现在前端应用中Promise已经得到了广泛使用。本文通过实现符合Promise/A+规范的Promise，对其加深印象。</p>
<!-- more -->
<h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">&ZeroWidthSpace;</a></h2>
<p>我们在使用Promise时，通常是使用new操作符进行构造，传入resolver函数，该函数会接受成功(resolve)、失败(reject)的回调函数，当我们确定结果时，需要调用resolve或reject，具体代码如下：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> p1 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">success</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 1s后控制台打印success</span></span>
<span class="line"><span style="color: #A6ACCD">p1</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(res))</span></span></code></pre>
</div><p>所以我们的Promise也需要是个构造函数，并且执行用户传入的resolver函数，将定义好的回调函数传进去。下面是具体的代码：</p>
<p><strong>注：本文代码的实现，下划线开头代表私有属性、私有方法。</strong></p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 定义Promise的三种状态常量</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> PENDING </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">PENDING</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> FULFILLED </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">FULFILLED</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> REJECTED </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">REJECTED</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Promise</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolver</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 传入的必须是函数</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resolver</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">TypeError</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Promise resolver </span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resolver</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D"> is not a function</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// resolve或reject的结果值</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined;</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 状态</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 执行</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">resolver</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_resolve</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">bind</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_reject</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">bind</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 捕获错误</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">_reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 私有方法，传给resolver的成功、失败回调</span></span>
<span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">_resolve</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">_reject</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span></code></pre>
</div><p>接下来我们来实现_resolve、_reject私有方法，其实逻辑很简单，我们只需要改变Promise状态，以及成功的值或者失败的原因。但要注意<strong>Promise一旦状态改变，就不会再变，任何时候都可以得到这个结果</strong>，所以我们只有在状态时PENDING的时才会执行。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">_resolve</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// setTimeout 为了异步执行</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">FULFILLED</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">_reject</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// setTimeout 为了异步执行</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">REJECTED</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reason</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="promise-prototype-then" tabindex="-1">Promise.prototype.then <a class="header-anchor" href="#promise-prototype-then" aria-label="Permalink to &quot;Promise.prototype.then&quot;">&ZeroWidthSpace;</a></h2>
<p>Promise的核心就是<code>then</code>方法，Promise/A+规范大都也是针对then方法进行阐述，实现了<code>then</code>方法后，我们再来实现其他API就方便了很多。</p>
<p>Promise的<code>then</code>方法的规范有如下几点</p>
<ol>
<li>
<p>接受两个参数，onFulfilled(成功回调)， onRejected(失败回调)，<strong>当回调不是函数时， 其必须被忽略，支持透传</strong></p>
</li>
<li>
<p>then 方法可以被同一个 Promise 调用多次</p>
<ul>
<li>当 Promise 成功执行时，所有 onFulfilled 需按照其注册顺序依次回调</li>
<li>当 Promise 被拒绝执行时，所有的 onRejected 需按照其注册顺序依次回调</li>
</ul>
</li>
<li>
<p>then 方法必须返回一个 Promise 对象</p>
<ul>
<li>如果 onFulfilled 或者 onRejected 返回一个值 x ，则运行下面的<strong>Promise解决过程</strong></li>
<li>如果 onFulfilled 或者 onRejected 抛出一个异常 e ，则 promise2 必须拒绝执行，并返回拒因 e</li>
</ul>
</li>
</ol>
<p><strong>我们针对上述几点分别来实现一下</strong></p>
<p>关于第一点，可以控制台执行下面代码</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> p1 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">success</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 1s后控制台打印success</span></span>
<span class="line"><span style="color: #A6ACCD">p1</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(res))</span></span></code></pre>
</div><p>第二个then方法依然可以接受到resolve成功的值，所以当then方法传入的不是函数时，我们要规范使其变成函数支持透传。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">onFulfilled</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">onRejected</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 保证是函数，不是函数要实现透传</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">onFulfilled</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onFulfilled</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onFulfilled</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">v</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">onRejected</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onRejected</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onRejected</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">v</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span><span style="color: #F07178"> </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>实现第一点很简单，我们只需要吧把结果/错误 -&gt; 返回/抛出传递给出去就可以啦。</p>
<p>我们再来看第二点，为了可以多次调用并且依次执行，我们需要改下之前写过的代码，我们需要增加俩个回调队列，成功、失败各一个。其实也可以用一个队列来存储，我这里采用的分别存储。</p>
<div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">function Promise(resolver) {</span></span>
<span class="line"><span style="color: #A6ACCD">  // 忽略无关代码...</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  // resolve的回调队列</span></span>
<span class="line"><span style="color: #89DDFF">+</span><span style="color: #C3E88D"> this._resolveCbs = [];</span></span>
<span class="line"><span style="color: #A6ACCD">  // reject的回调队列</span></span>
<span class="line"><span style="color: #89DDFF">+</span><span style="color: #C3E88D"> this._rejectCbs = [];</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">Promise.prototype._resolve = function(value) {</span></span>
<span class="line"><span style="color: #A6ACCD">  setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color: #A6ACCD">    // 忽略无关代码...</span></span>
<span class="line"><span style="color: #89DDFF">+</span><span style="color: #C3E88D">   this._resolveCbs.forEach((callback) =&gt; callback(value));</span></span>
<span class="line"><span style="color: #A6ACCD">  });</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">Promise.prototype._reject = function(reason) {</span></span>
<span class="line"><span style="color: #A6ACCD">  setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color: #A6ACCD">    // 忽略无关代码...</span></span>
<span class="line"><span style="color: #89DDFF">+</span><span style="color: #C3E88D">   this._rejectCbs.forEach((callback) =&gt; callback(reason));</span></span>
<span class="line"><span style="color: #A6ACCD">  });</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
</div><p>我们在then方法中，如果状态还处于PENDING，就需要将传入的onFulfilled(成功回调)， onRejected(失败回调)插入对应的队列中，否则直接执行就好。这也就是我们要实现第三点的核心逻辑。</p>
<p>根据第三点所述，我们总是需要执行onFulfilled 或 onRejected，然后传入<strong>Promise解决过程</strong>，此外还需要捕获这个过程，直接reject。具体<strong>核心代码</strong>如下</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> promise </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">undefined;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #A6ACCD"> (promise </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">var</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">x</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onFulfilled</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span><span style="color: #F07178">  </span><span style="color: #676E95; font-style: italic">// 或者   var x = onRejected(this._result);</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// resolvePromise Promise解决过程 下一段讲</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">resolvePromise</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">promise</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">x</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">))</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><p>下面我们就是把这段代码分别用在 PENDING, FULFILLED, REJECTED三种状态，完整代码如下：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">onFulfilled</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">onRejected</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 保证是函数，不是函数要实现透传</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">onFulfilled</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onFulfilled</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onFulfilled</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">v</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">onRejected</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onRejected</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onRejected</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">v</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">promise</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 已经resolve</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">FULFILLED</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">promise</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #C792EA">var</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">x</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onFulfilled</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">resolvePromise</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">promise</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">x</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 已经reject</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">REJECTED</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">promise</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #C792EA">var</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">x</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onRejected</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">resolvePromise</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">promise</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">x</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// pending时直接放入回调队列中，放入队列汇总不需要加setTimeout,因为执行时候已经是setTimeout中</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">promise</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_resolveCbs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #C792EA">var</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">x</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onFulfilled</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">resolvePromise</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">promise</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">x</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_rejectCbs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #C792EA">var</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">x</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onRejected</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">resolvePromise</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">promise</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">x</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><p>上面代码看似很多，很复杂，但其实根据规范来看，其实很简单，而且有大量的重复代码。那我们还有一个<code>resolvePromise</code>函数没有完成，接下来我希望读者可以自己去读一下<strong>Promise 解决过程</strong>的逻辑。<a href="https://www.ituring.com.cn/article/66566" target="_blank" rel="noreferrer">点击链接去查看</a>。因为函数的实现完全照规范的逻辑书写，没有技巧可言。</p>
<p><strong>这里简单的总结几点</strong>：</p>
<ol>
<li>
<p>为了和其他promise并存，我们不能只判断onFulfilled，onRejected函数返回的是否是promise，我们只需要保证其返回值存在<code>then</code>方法就去尝试按promise处理。</p>
</li>
<li>
<p>如果没有then属性，或者then属性不是函数的话，直接按照resolve(x)处理</p>
</li>
<li>
<p>如果then存在并且是函数，按照promise处理的同时，需要捕获错误按reject(x)处理</p>
</li>
<li>
<p>如果传入的回调均被调用，或者被同一参数调用了多次，则优先采用首次调用并忽略剩下的调用（只能调用一次，需要有标志位）</p>
</li>
</ol>
<p>按照上述四点，我们可以写出<code>resolvePromise</code>函数的代码</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">resolvePromise</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">promise</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">x</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 如果 promise 和 x 指向同一对象，以 TypeError 为据因拒绝执行 promise</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">x</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">promise</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">TypeError</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Chaining cycle detected for promise!</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 用于 “优先采用首次调用并忽略剩下的调用”的标志位</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">invoked</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 尝试把 x.then 赋值给 then</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">then</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined;</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// x 为对象或函数</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> ((</span><span style="color: #A6ACCD">x</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">x</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">object</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">x</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">then</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">x</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">then</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">then</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 如果 then 是函数，将 x 作为函数的作用域 this 调用之</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">then</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">call</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #A6ACCD">x</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">y</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">invoked</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">invoked</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolvePromise</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">promise</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">y</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">r</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">invoked</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">invoked</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">r</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        )</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 如果 then 不是函数，以 x 为参数执行 promise</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">x</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 如果取 x.then 的值时抛出错误 e ，则以 e 为据因拒绝 promise</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">invoked</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">invoked</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果 x 不为对象或者函数，以 x 为参数执行 promise</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">x</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="promise-prototype-catch" tabindex="-1">Promise.prototype.catch <a class="header-anchor" href="#promise-prototype-catch" aria-label="Permalink to &quot;Promise.prototype.catch&quot;">&ZeroWidthSpace;</a></h2>
<p>.catch()发生错误时的回调函数 相当于使用.then(null, onRejected)，我们实现了then方法，所以catch方法就相当简单</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">onRejected</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #89DDFF">null,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onRejected</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="promise-prototype-finally" tabindex="-1">Promise.prototype.finally <a class="header-anchor" href="#promise-prototype-finally" aria-label="Permalink to &quot;Promise.prototype.finally&quot;">&ZeroWidthSpace;</a></h2>
<p>.finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">promise</span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD; font-style: italic">result</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178">···</span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD; font-style: italic">error</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178">···</span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #82AAFF">finally</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178">···</span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><p>上面代码中，不管promise最后的状态，在执行完then或catch指定的回调函数以后，都会执行finally方法指定的回调函数。</p>
<p>那我们就可以通过then方法，传入的成功、失败回调函数中都去执行callback</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">finally</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">callback</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #82AAFF">callback</span><span style="color: #F07178">())</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #82AAFF">callback</span><span style="color: #F07178">())</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reason</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  )</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><p>注意我们要.then将结果透传，因为finally后面还可以继续调用then方法。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 最后一个then理应接受到2作为参数</span></span>
<span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">2</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">finally</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(res))</span></span></code></pre>
</div><h2 id="promise-resolve" tabindex="-1">Promise.resolve <a class="header-anchor" href="#promise-resolve" aria-label="Permalink to &quot;Promise.resolve&quot;">&ZeroWidthSpace;</a></h2>
<p>有时需要将现有对象转为 Promise 对象，Promise.resolve()方法就起到这个作用。</p>
<p>我们只需要把then方法中的成功逻辑拿出来使用就可以。(其中x不是onFulfilled执行的值，直接是传入的参数)</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">promise</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">promise</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">resolvePromise</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">promise</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="promise-reject" tabindex="-1">Promise.reject <a class="header-anchor" href="#promise-reject" aria-label="Permalink to &quot;Promise.reject&quot;">&ZeroWidthSpace;</a></h2>
<p>Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reject</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">_</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="promise-all" tabindex="-1">Promise.all <a class="header-anchor" href="#promise-all" aria-label="Permalink to &quot;Promise.all&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 只有所有实例的状态都变成fulfilled，新的实例状态才会变成fulfilled，新实例参数</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 只要其中有一个被rejected，新的实例就变成rejected，此时第一个被reject的实例的返回值，会传递给新实例的回调函数。</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">all</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">promises</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resolvedCount</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">promiseCount</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">promises</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resolvedValues</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Array</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">promiseCount</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">promiseCount</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">promises</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">])</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #A6ACCD">resolvedCount</span><span style="color: #89DDFF">++;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #A6ACCD">resolvedValues</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">          </span><span style="color: #676E95; font-style: italic">// 数量相同说明promise实例都是成功</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">resolvedCount</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">promiseCount</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolvedValues</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">          </span><span style="color: #676E95; font-style: italic">// 率先reject的直接失败，传入原因</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      )</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="promise-race" tabindex="-1">Promise.race <a class="header-anchor" href="#promise-race" aria-label="Permalink to &quot;Promise.race&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * Promise.race()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 只要其中有一个状态变更，新的实例就跟随着变更，参数会传递给新实例的回调函数。</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">race</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">promises</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">var</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">promises</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 谁快谁说了算！</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">promises</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">])</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      )</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">&ZeroWidthSpace;</a></h2>
<p>Promise的实现难点主要集中在then方法上，其他方法都是基于then方法实现的。实现一个Promise也是笔试的高频题目，希望本文章可以给你带来帮助。</p>
<p><a href="https://github.com/super-wall/Promise" target="_blank" rel="noreferrer">完整源码传送门</a></p>
<h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>
<p><a href="https://www.ituring.com.cn/article/66566" target="_blank" rel="noreferrer">Promise/A+规范中文版</a></p>
</li>
<li>
<p><a href="https://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noreferrer">阮一峰ES6</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s/06Qg9FG4PSzuxdipbDAa6Q" target="_blank" rel="noreferrer">手写Promise最简20行版本，实现异步链式调用</a></p>
</li>
<li>
<p><a href="https://github.com/xieranmaya/blog/issues/3" target="_blank" rel="noreferrer">https://github.com/xieranmaya/blog/issues/3</a></p>
</li>
<li>
<p><a href="https://juejin.im/post/5b83cb5ae51d4538cc3ec354" target="_blank" rel="noreferrer">Promise实现原理（附源码）掘进</a></p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JavaScript实现最大堆]]></title>
            <link>https://ihaoze.cn/blog//posts/max-heap</link>
            <guid>https://ihaoze.cn/blog//posts/max-heap</guid>
            <pubDate>Sat, 28 Mar 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>JS实现数据结构：最大堆，并解决系列leetcode问题。</p>
<!-- more -->
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[二叉树的遍历]]></title>
            <link>https://ihaoze.cn/blog//posts/binary-tree-traverse</link>
            <guid>https://ihaoze.cn/blog//posts/binary-tree-traverse</guid>
            <pubDate>Thu, 13 Feb 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[<p>分别使用<code>递归</code>和<code>迭代</code>实现二叉树的前序、中序、后续、层序遍历。</p>
]]></description>
            <content:encoded><![CDATA[<p>分别使用<code>递归</code>和<code>迭代</code>实现二叉树的前序、中序、后续、层序遍历。</p>
<hr>
<h2 id="前序遍历" tabindex="-1">前序遍历 <a class="header-anchor" href="#前序遍历" aria-label="Permalink to &quot;前序遍历&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal" target="_blank" rel="noreferrer">LeetCode地址</a></p>
<h3 id="递归" tabindex="-1">递归 <a class="header-anchor" href="#递归" aria-label="Permalink to &quot;递归&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 定义二叉树的节点</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * function TreeNode(val) {</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.val = val;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.left = this.right = null;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * }</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[]</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> preorderTraversal </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">_preOrder</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">root</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">_preOrder</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">_preOrder</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span><span style="color: #F07178">  </span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">_preOrder</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h3 id="迭代" tabindex="-1">迭代 <a class="header-anchor" href="#迭代" aria-label="Permalink to &quot;迭代&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 定义二叉树的节点</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * function TreeNode(val) {</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.val = val;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.left = this.right = null;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * }</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[]</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> preorderTraversal </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">root</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">stack</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">stack</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cur</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">stack</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pop</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">cur</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">cur</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">stack</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">cur</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">cur</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">stack</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">cur</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">;</span><span style="color: #F07178">   </span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="中序遍历" tabindex="-1">中序遍历 <a class="header-anchor" href="#中序遍历" aria-label="Permalink to &quot;中序遍历&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noreferrer">LeetCode地址</a></p>
<h3 id="递归-1" tabindex="-1">递归 <a class="header-anchor" href="#递归-1" aria-label="Permalink to &quot;递归&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 定义二叉树的节点</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * function TreeNode(val) {</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.val = val;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.left = this.right = null;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * }</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[]</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> inorderTraversal </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">_inOrder</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">root</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">_inOrder</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">_inOrder</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span><span style="color: #F07178">  </span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">_inOrder</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h3 id="迭代-1" tabindex="-1">迭代 <a class="header-anchor" href="#迭代-1" aria-label="Permalink to &quot;迭代&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 定义二叉树的节点</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * function TreeNode(val) {</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.val = val;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.left = this.right = null;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * }</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 把当前节点的所有左子孙节点压入栈中，依次取出。</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[]</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> inorderTraversal </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">root</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">stack</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cur</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">stack</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cur</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">cur</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">stack</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">cur</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">cur</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cur</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">stack</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pop</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">cur</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="后序遍历" tabindex="-1">后序遍历 <a class="header-anchor" href="#后序遍历" aria-label="Permalink to &quot;后序遍历&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/" target="_blank" rel="noreferrer">LeetCode地址</a></p>
<h3 id="递归-2" tabindex="-1">递归 <a class="header-anchor" href="#递归-2" aria-label="Permalink to &quot;递归&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 定义二叉树的节点</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * function TreeNode(val) {</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.val = val;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.left = this.right = null;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * }</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[]</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> postorderTraversal </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">_postOrder</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">root</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">_postOrder</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">_postOrder</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">_postOrder</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h3 id="迭代-2" tabindex="-1">迭代 <a class="header-anchor" href="#迭代-2" aria-label="Permalink to &quot;迭代&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 定义二叉树的节点</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * function TreeNode(val) {</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.val = val;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.left = this.right = null;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * }</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[]</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> postorderTraversal </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">root</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">stack1</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">stack1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">stack1</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pop</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">unshift</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">stack1</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">stack1</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="层序遍历" tabindex="-1">层序遍历 <a class="header-anchor" href="#层序遍历" aria-label="Permalink to &quot;层序遍历&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noreferrer">LeetCode地址</a></p>
<h3 id="递归-3" tabindex="-1">递归 <a class="header-anchor" href="#递归-3" aria-label="Permalink to &quot;递归&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * function TreeNode(val) {</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.val = val;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.left = this.right = null;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * }</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[][]</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> levelOrder </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">root</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">_levelOrder</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">level</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">level</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">([])</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 为下一级准备的</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">ret</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">level</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #82AAFF">_levelOrder</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">level</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #82AAFF">_levelOrder</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">level</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">_levelOrder</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h3 id="迭代-3" tabindex="-1">迭代 <a class="header-anchor" href="#迭代-3" aria-label="Permalink to &quot;迭代&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * function TreeNode(val) {</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.val = val;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *     this.left = this.right = null;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * }</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[][]</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> levelOrder </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">root</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">level</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">queue</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">queue</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">([])</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">queue</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 通过遍历，提前执行完下一层的所有元素，层级level就可以+1</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">queue</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">shift</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">ret</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">level</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">                </span><span style="color: #A6ACCD">queue</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">                </span><span style="color: #A6ACCD">queue</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">level</span><span style="color: #89DDFF">++;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">&ZeroWidthSpace;</a></h2>
<p>关于二叉树的前序、中序、后续遍历，使用递归的方法不用多说，主要是迭代方法，通过对<code>栈</code>的应用，先后推入栈中，从而实现不同顺序的遍历。二叉树的层序遍历通过对<code>队列</code>的应用实现。</p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>本文只包含其中俩种解法，更详细的解答可以点击参考↓的地址(带图解)！</p>
</div>
<h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>
<p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/leetcodesuan-fa-xiu-lian-dong-hua-yan-shi-xbian-2/" target="_blank" rel="noreferrer">前中后序遍历-题解</a></p>
</li>
<li>
<p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/er-cha-shu-de-ceng-ci-bian-li-by-leetcode/" target="_blank" rel="noreferrer">层序遍历-题解</a></p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[redux和react-redux从实现到理解]]></title>
            <link>https://ihaoze.cn/blog//posts/redux</link>
            <guid>https://ihaoze.cn/blog//posts/redux</guid>
            <pubDate>Wed, 20 Nov 2019 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>我们在使用react进行开发时，通常会搭配react-redux进行状态管理。本文通过实现其简易版来理解内部原理</p>
<!-- more -->
<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">&ZeroWidthSpace;</a></h2>
<p>我们在使用<code>react</code>进行开发时，通常会搭配<code>react-redux</code>进行状态管理，<code>react-redux</code>其实是基于<code>redux</code>封装的，使开发者更方便的使用<code>redux</code>管理数据，所以要明确<code>redux</code>完全可以单独使用。我们要学习<code>react-redux</code>首先要先学习<code>redux</code>。</p>
<p><a href="https://codesandbox.io/s/jtyxk" target="_blank" rel="noreferrer">redux简单实现demo</a></p>
<p><a href="https://codesandbox.io/s/react-redux-demo-00x44" target="_blank" rel="noreferrer">react-redux简单实现demo</a></p>
<h2 id="redux基本使用" tabindex="-1">Redux基本使用 <a class="header-anchor" href="#redux基本使用" aria-label="Permalink to &quot;Redux基本使用&quot;">&ZeroWidthSpace;</a></h2>
<p>我们先来看一下<code>redux</code>的基本使用，下面的代码通过<code>createStore</code>来创建一个<code>store</code>，创建成功后会返回三个API(<code>subscribe</code>、<code>dispatch</code>、<code>getState</code>)。我们通过<code>subscribe</code>来订阅store中数据的变化，当有变化时会执行回调函数，通过<code>getState</code>获取最新数据输出，最后我们通过<code>dispatch</code>传入<code>action</code>来触发数据改变。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// src/store/index.js</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">createStore</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">redux</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 定义reducer</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">counter</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">state</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">action</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">switch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">action</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">type</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">case</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">INCREMENT</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">state</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">case</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">DECREMENT</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">state</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">state</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 创建store，返回API { subscribe, dispatch, getState }</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> store </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createStore</span><span style="color: #A6ACCD">(counter)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 订阅store变化试，派发通知</span></span>
<span class="line"><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">subscribe</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getState</span><span style="color: #A6ACCD">()))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 通过dispatch触发action，做到store中数据变化</span></span>
<span class="line"><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">dispatch</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">INCREMENT</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">) </span><span style="color: #676E95; font-style: italic">// 1</span></span>
<span class="line"><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">dispatch</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">INCREMENT</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">) </span><span style="color: #676E95; font-style: italic">// 2</span></span>
<span class="line"><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">dispatch</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">DECREMENT</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">) </span><span style="color: #676E95; font-style: italic">// 1</span></span></code></pre>
</div><p>我们引入这个文件，在控制台中可以看到依次输出1、2、1。可以看出来<code>redux</code>用法很简单，其实它只是规定了改变数据的方法，当我们遵循这个规则时，我们的数据源就是唯一的，数据也变得可控起来。接下来我们自己来实现一个简易版的<code>redux</code>来满足基本使用。</p>
<h2 id="实现简易版redux" tabindex="-1">实现简易版Redux <a class="header-anchor" href="#实现简易版redux" aria-label="Permalink to &quot;实现简易版Redux&quot;">&ZeroWidthSpace;</a></h2>
<p>通过上面的例子，我们首先要实现<code>createStore</code>，该函数会返回三个常用的API，并且可以操作state。下面是函数的骨架。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// src/mock/redux.js</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createStore</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reducer</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">currentState</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 始终保持最新的state</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">listeners</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 用于存储订阅者</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 订阅store</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">subscribe</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 获取最新state</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">getState</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 改变数据的唯一方法（约定）</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dispatch</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">subscribe</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">getState</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dispatch</span><span style="color: #F07178"> </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #A6ACCD"> createStore</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><p>下面我们逐一实现这三个API。</p>
<h3 id="getstate" tabindex="-1">getState <a class="header-anchor" href="#getstate" aria-label="Permalink to &quot;getState&quot;">&ZeroWidthSpace;</a></h3>
<p><code>getState</code>实现就超简单了，因为内部变量<code>currentState</code>始终保持最新，我们只要将这个变量返回就好了，一行代码搞定</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 获取最新state</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">getState</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">currentState</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><h3 id="subscribe" tabindex="-1">subscribe <a class="header-anchor" href="#subscribe" aria-label="Permalink to &quot;subscribe&quot;">&ZeroWidthSpace;</a></h3>
<p>我们定义了内部变量<code>listeners</code>，所以只要将传入的订阅者存储到<code>listeners</code>中就可以。<strong>注意</strong>：订阅者一定是函数，这样<code>state</code>变化时，去执行<code>listeners</code>中的函数就可以了。我们还要返回一个函数用于取消订阅。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 订阅store</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">subscribe</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  	</span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">期待订阅者是个函数类型</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">listeners</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 用于取消订阅</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">describe</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  	</span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">idx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">listeners</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">indexOf</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">listeners</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">splice</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">idx</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h3 id="dispatch" tabindex="-1">dispatch <a class="header-anchor" href="#dispatch" aria-label="Permalink to &quot;dispatch&quot;">&ZeroWidthSpace;</a></h3>
<p><code>dispatch</code>接受一个action对象，该action对象会传入到<code>reducer</code>中，<code>reducer</code>是我们在创建<code>store</code>传入的。<code>reducer</code>约定会通过<code>action</code>的type来返回新的state，那其实<code>dispatch</code>的原理也就很简单了。我们只要把传入的action传入到<code>reducer</code>函数中，返回新的state赋值给<code>currentState</code>就可以了。看代码：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 改变数据的唯一方法（约定）</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">dispatch</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">action</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">currentState</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reducer</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">currentState</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">action</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 别忘了，数据改变后，要通知所有的订阅者。</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">listeners</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">())</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>是不是超Easy？抛去<code>redux</code>的概念，其实我们就是通过闭包的概念，来操作内部的数据，从而实现状态管理。</p>
<div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">-</span><span style="color: #F07178"> import { createStore } from &#39;redux&#39;</span></span>
<span class="line"><span style="color: #89DDFF">+</span><span style="color: #C3E88D"> import createStore from &quot;../mock/redux&quot;;</span></span></code></pre>
</div><p>我们将<code>src/store/index.js</code>文件中<code>createStore</code>替换成我们的，再次执行看下，效果是一致的。<a href="https://codesandbox.io/s/jtyxk" target="_blank" rel="noreferrer">demo源码</a></p>
<h2 id="react-redux的基本使用" tabindex="-1">React-Redux的基本使用 <a class="header-anchor" href="#react-redux的基本使用" aria-label="Permalink to &quot;React-Redux的基本使用&quot;">&ZeroWidthSpace;</a></h2>
<p>我们定义好<code>store</code>，然后通过<code>react-redux</code>提供的<code>Provider</code>向下注入依赖<code>store</code>。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> store </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./store/index</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Provider</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">react-redux</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 忽略无关代码</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">ReactDOM</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">render</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">Provider</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">store</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">}&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">APP</span><span style="color: #89DDFF"> /&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;/</span><span style="color: #FFCB6B">Provider</span><span style="color: #89DDFF">&gt;,</span></span>
<span class="line"><span style="color: #A6ACCD">  rootElment</span></span>
<span class="line"><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><p>我们在需要依赖state的组件文件中使用<code>react-redux</code>提供的<code>connect</code>对组件进行高阶包裹。其中我们向传connect函数传入俩个参数，分别是<code>mapStateToProps</code>和<code>mapDispatchToProps</code>，作用跟名字相同，<code>react-redux</code>会把俩个函数执行，将返回值都以<code>props</code>的形式传入到组件中。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">connect</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">react-redux</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 忽略无关代码</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">mapStateToProps</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">state</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    count</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">state</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">mapDispatchToProps</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">dispatch</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    increment</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">dispatch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        type</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">INCREMENT</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F07178">    decrement</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">dispatch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        type</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">DECREMENT</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">connect</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">  mapStateToProps</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  mapDispatchToProps</span></span>
<span class="line"><span style="color: #A6ACCD">)(App)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// App组件接受到的props中 包括 count、increment、decrement</span></span></code></pre>
</div><p>我们只要在App组件从<code>props</code>中解构出值`进行使用。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">App</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">props</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">increment</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">decrement</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">props</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">className</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">App</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">p</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">当前count: </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">}&lt;/</span><span style="color: #F07178">p</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">button</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">onClick</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">increment</span><span style="color: #89DDFF">}&gt;</span><span style="color: #A6ACCD">增加1</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">button</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">button</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">onClick</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">decrement</span><span style="color: #89DDFF">}&gt;</span><span style="color: #A6ACCD">减少1</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">button</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #F07178">  )</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>乍一看代码量很多，但解决了组件嵌套的问题，当嵌套组件需要依赖state时候，我们只需要用<code>connect</code>进行包裹，传入<code>mapStateToProps</code>就可以。而且不需要我们手动订阅<code>store</code>的变化，从而触发组件的渲染。那它是如何工作的呢？我们接下来分析一波，并动手实现一个简易的<code>react-redux</code>。</p>
<h2 id="实现简易版react-redux" tabindex="-1">实现简易版React-Redux <a class="header-anchor" href="#实现简易版react-redux" aria-label="Permalink to &quot;实现简易版React-Redux&quot;">&ZeroWidthSpace;</a></h2>
<p>首先我们忘记<code>react-redux</code>的存在，尝试直接在<code>react</code>组件中使用<code>redux</code>，我们需要在组件渲染前获取到所需的<code>state</code>。并且订阅<code>store</code>，当其<code>state</code>变化后，我们要重新渲染该组件从而获取到最新的state。代码如下：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">App</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">extends</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">React</span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">Component</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">componentDidMount</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 订阅</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">describe</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">subscribe</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 强制渲染</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">forceUpdate</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">componentWillUnmount</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 取消订阅</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">describe</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">increment</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #F07178">dispatch(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      type</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">INCREMENT</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">decrement</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #F07178">dispatch(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      type</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">DECREMENT</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">render</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 获取当前状态并赋值</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getState</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">className</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">App</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">p</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">当前count: </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">}&lt;/</span><span style="color: #F07178">p</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">button</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">onClick</span><span style="color: #89DDFF">={this.</span><span style="color: #A6ACCD">increment</span><span style="color: #89DDFF">}&gt;</span><span style="color: #A6ACCD">增加1</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">button</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">button</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">onClick</span><span style="color: #89DDFF">={this.</span><span style="color: #A6ACCD">decrement</span><span style="color: #89DDFF">}&gt;</span><span style="color: #A6ACCD">减少1</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">button</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #F07178">    )</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>我们可以发现，<strong>获取所需state</strong>和<strong>订阅store重新渲染组件</strong>是每一个需要依赖<code>redux</code>组件都需要的，所以我们应该抽离出公共部分。</p>
<h3 id="connect" tabindex="-1">connect <a class="header-anchor" href="#connect" aria-label="Permalink to &quot;connect&quot;">&ZeroWidthSpace;</a></h3>
<p>在类组件我们想要复用逻辑只能通过<code>HOC</code><a href="https://zh-hans.reactjs.org/docs/higher-order-components.html" target="_blank" rel="noreferrer">高阶组件</a>来实现，<code>connect</code>函数其实就是生成高阶组件。下面我们先写个最基本的connect函数：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 通过传入mapStateToProps/mapDispatchToProps生成高阶组件</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 并把所需state通过props传入组件</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">function</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">mapStateToProps</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">function</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">mapDispatchToProps</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">connect</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">mapStateToProps</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">mapDispatchToProps</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">wrapWithConnect</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">WrapperComponent</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ConnectFunction</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">props</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 获取到所需state，触发dispatch的函数</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">stateProps</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">mapStateToProps</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getState</span><span style="color: #F07178">())</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dispatchProps</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">mapDispatchToProps</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">dispatch</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 执行强制渲染</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">[,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">forceRender</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useReducer</span><span style="color: #F07178">(</span><span style="color: #A6ACCD; font-style: italic">s</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">s</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 订阅store变化</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">useEffect</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">describe</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">subscribe</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">forceRender</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">describe</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> [])</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">WrapperComponent</span><span style="color: #89DDFF"> {...</span><span style="color: #A6ACCD">props</span><span style="color: #89DDFF">} {...</span><span style="color: #A6ACCD">stateProps</span><span style="color: #89DDFF">} {...</span><span style="color: #A6ACCD">dispatchProps</span><span style="color: #89DDFF">} /&gt;;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><strong>注</strong>：因为函数组件没有<code>this.forceUpdate</code>方法，所以通过<code>useReducer</code>自增实现同样的效果。</p>
<p>上述代码把<strong>获取所需state</strong>和<strong>订阅store重新渲染组件</strong>俩部分都抽离了出来，使我们可以在需要使用<code>store</code>中数据时，直接通过<code>connect(mapStateToProps)(Comp)</code>对组件进行包裹即可。</p>
<p>但现在还有<strong>俩个问题</strong>需要优化。<strong>1</strong>.是我们现在的store是直接引入的，无法支持动态的store ，<strong>2</strong>.是目前为止，我们store变化就会重新渲染，当我们所依赖的值没有改变时，我们无需重新渲染。</p>
<h3 id="provider" tabindex="-1">Provider <a class="header-anchor" href="#provider" aria-label="Permalink to &quot;Provider&quot;">&ZeroWidthSpace;</a></h3>
<p>我们先解决上面的说的第一个问题，想支持动态的store，我们就需要实现<code>react-redux</code>中的<code>Provider</code>组件，看名字大家应该知道它是基于<code>react context</code>实现的，没错，要实现动态store，我们需要使<code>Provider</code>向下注入依赖，然后在<code>connect</code>包裹组件的时候，通过<code>context</code>来获取最新store。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> storeContext </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./storeContext</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// storeContext就是通过React.createContext()生成context</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> Provider </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">({</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">store</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">children</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">})</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">storeContext.Provider</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">value</span><span style="color: #89DDFF">={</span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">}&gt;{</span><span style="color: #A6ACCD">children</span><span style="color: #89DDFF">}&lt;/</span><span style="color: #FFCB6B">storeContext.Provider</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #F07178">  )</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #A6ACCD"> Provider</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><p><code>Provider</code>组件就这么简单，接下来我们需要修改<code>connect</code>函数</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> storeContext </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./storeContext</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 忽略无关代码...</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> store </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useContext</span><span style="color: #A6ACCD">(storeContext)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 获取到所需state，触发dispatch的函数</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> stateProps </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">mapStateToProps</span><span style="color: #A6ACCD">(store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getState</span><span style="color: #A6ACCD">())</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> dispatchProps </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">mapDispatchToProps</span><span style="color: #A6ACCD">(store</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">dispatch)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 订阅store变化</span></span>
<span class="line"><span style="color: #82AAFF">useEffect</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">describe</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">subscribe</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">forceRender</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">describe</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> [store])</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 忽略无关代码...</span></span></code></pre>
</div><p>通过<code>react</code>提供的<code>useContext()</code>来获取到当前<code>store</code>，<code>useEffect</code>第二个参数依赖store，当store本身变化时，也会重新订阅。这样我们第一个问题算是解决了。用法与<code>react-redux</code>也大体相同。</p>
<p><strong>再解决第二个问题</strong>：我们现在订阅store中state变化，还是很暴力的(直接强制重新渲染)。要解决这个问题也很简单，我们只要订阅的回调函数中，加入新老值的比较，当不相同时，我们才执行<code>forceRender</code>。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// src/react-redux/connect.js</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> shallowEqual </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">shallowequal</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">connect</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">mapStateToProps</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">mapDispatchToProps</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">wrapWithConnect</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">WrapperComponent</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">ConnectFunction</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">props</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">store</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useContext</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">storeContext</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">lastStateProps</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useRef</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 保存最新的state</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">lastDispatchProps</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useRef</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 执行强制渲染</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">[,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">forceRender</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useReducer</span><span style="color: #F07178">(</span><span style="color: #A6ACCD; font-style: italic">s</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">s</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 订阅store变化</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">useEffect</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">lastStateProps</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">mapStateToProps</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getState</span><span style="color: #F07178">())</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">lastDispatchProps</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">mapDispatchToProps</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">dispatch</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">store</span><span style="color: #F07178">])</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 订阅store变化</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">useEffect</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">forceRender</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">checkForUpdates</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStateProps</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">mapStateToProps</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getState</span><span style="color: #F07178">())</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">          </span><span style="color: #676E95; font-style: italic">// 执行浅比较</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #82AAFF">shallowEqual</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">lastStateProps</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStateProps</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">render</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">// 赋值最新的state</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">lastStateProps</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStateProps</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #82AAFF">forceRender</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">describe</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">subscribe</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">checkForUpdates</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">describe</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">store</span><span style="color: #F07178">])</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">WrapperComponent</span></span>
<span class="line"><span style="color: #89DDFF">          {...</span><span style="color: #A6ACCD">props</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">          {...</span><span style="color: #A6ACCD">lastStateProps</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">          {...</span><span style="color: #A6ACCD">lastDispatchProps</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">        /&gt;</span></span>
<span class="line"><span style="color: #F07178">      )</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>我们引入<code>shallowequal</code>对新老state进行浅比较，当不相等时，才进行<code>forceRender</code>。</p>
<div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">-</span><span style="color: #F07178"> import { Provider } from &quot;react-redux&quot;;</span></span>
<span class="line"><span style="color: #89DDFF">+</span><span style="color: #C3E88D"> import { connect, Provider } from &quot;./react-redux&quot;;</span></span></code></pre>
</div><p>现在，我们将App组件中的<code>Provider</code>、<code>connect</code>替换掉，代码是可以正常的使用。<a href="https://codesandbox.io/s/react-redux-demo-00x44" target="_blank" rel="noreferrer">完整demo</a></p>
<h3 id="useselector" tabindex="-1">useSelector <a class="header-anchor" href="#useselector" aria-label="Permalink to &quot;useSelector&quot;">&ZeroWidthSpace;</a></h3>
<p>上面实现了<code>connect</code>用于共享逻辑，虽然函数组件也可以通过它进行包裹使用，但<code>React Hook</code>的出现让我们对于逻辑复用有了更好的办法，那就是自己写一个<code>Hook</code>。<code>useSelector</code>是<code>react-redux</code>官方已经实现了的。具体的使用如下：</p>
<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">const</span><span style="color: #A6ACCD"> count </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useSelector</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD">state </span><span style="color: #89DDFF">=&gt;</span><span style="color: #A6ACCD"> state</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">)</span></span></code></pre>
</div><p>通过传入一个<code>选取函数</code>返回所需要的state，其实这里的<code>选取函数</code>相当于是<code>mapStateToProps</code>。我们来动手实现以下。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> storeContext </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./storeContext</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useSelector</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">seletorFn</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">store</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useContext</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">storeContext</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">seletorFn</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getState</span><span style="color: #F07178">())</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>现在我们可以执行<code>useSeletor</code>获取到所需要的state，接下来我们要做的就是<strong>订阅store重新渲染</strong>，其实就是我们实现connect中函数组件的代码，我们直接copy过来改一下</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> storeContext </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./storeContext</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> shallowEqual </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">shallowequal</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useSelector</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">selectorFn</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">store</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useContext</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">storeContext</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">lastStateProps</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useRef</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">lastSelectorFn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useRef</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 执行强制渲染</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">[,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">forceRender</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useReducer</span><span style="color: #F07178">(</span><span style="color: #A6ACCD; font-style: italic">s</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">s</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 赋值state</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">useEffect</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">lastSelectorFn</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">selectorFn</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">lastStateProps</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">selectorFn</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getState</span><span style="color: #F07178">())</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 订阅store变化</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">useEffect</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">checkForUpdates</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStateProps</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">lastSelectorFn</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">current</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getState</span><span style="color: #F07178">())</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #82AAFF">shallowEqual</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">lastStateProps</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStateProps</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">render</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">lastStateProps</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStateProps</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">forceRender</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">describe</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">subscribe</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">checkForUpdates</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">forceRender</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">describe</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">store</span><span style="color: #F07178">])</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">lastStateProps</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><strong>注意</strong>：这里需要使用<code>lastSelectorFn</code>Ref存储<code>选择器</code>，否则useEffect依赖<code>selectorFn</code>会造成死循环。</p>
<h3 id="usedispatch" tabindex="-1">useDispatch <a class="header-anchor" href="#usedispatch" aria-label="Permalink to &quot;useDispatch&quot;">&ZeroWidthSpace;</a></h3>
<p>实现<code>useDispatch</code>就超简单了，就是直接返回<code>store.dispatch</code>就好</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">useContext</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">react</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> storeContext </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./storeContext</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">useDispatch</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">seletorFn</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">store</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useContext</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">storeContext</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">store</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">dispatch</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">&ZeroWidthSpace;</a></h2>
<p>本文中实现的<code>redux</code>、<code>react-redux</code>都只是实现了一小部分API，并且没有处理异常情况。但与源码的核心大体相同。希望阅读完的小伙伴有所收获，如果不过瘾还可以去阅读下源码哦。</p>
<h2 id="推荐" tabindex="-1">推荐 <a class="header-anchor" href="#推荐" aria-label="Permalink to &quot;推荐&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://github.com/brickspert/blog/issues/26" target="_blank" rel="noreferrer">redux好文章</a></p>
<p><a href="https://github.com/umijs/hox/blob/master/README-cn.md" target="_blank" rel="noreferrer"> 完美拥抱 React Hooks 的状态管理器hox</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[package.json各字段的作用]]></title>
            <link>https://ihaoze.cn/blog//posts/package.json</link>
            <guid>https://ihaoze.cn/blog//posts/package.json</guid>
            <pubDate>Wed, 23 Oct 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[<p>介绍package.json各字段的作用</p>
<!-- more -->
<h2 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>npm包的名字，必须是一个小写的单词，可以包含连字符<code>-</code>和下划线<code>_</code>。<strong>发布时必填</strong>。</p>
</blockquote>
<h2 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;version&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>npm包的版本号，必须是<code>x.x.x</code>的形式，并且遵循语义化版本规则。<strong>发布时必填</strong>。</p>
</blockquote>
<p>|   阶段   |             规则              | 例子  |
| :</p>
]]></description>
            <content:encoded><![CDATA[<p>介绍package.json各字段的作用</p>
<!-- more -->
<h2 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>npm包的名字，必须是一个小写的单词，可以包含连字符<code>-</code>和下划线<code>_</code>。<strong>发布时必填</strong>。</p>
</blockquote>
<h2 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;version&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>npm包的版本号，必须是<code>x.x.x</code>的形式，并且遵循语义化版本规则。<strong>发布时必填</strong>。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">阶段</th>
<th style="text-align:center">规则</th>
<th style="text-align:center">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">首次发版</td>
<td style="text-align:center">从1.0.0开始</td>
<td style="text-align:center">1.0.0</td>
</tr>
<tr>
<td style="text-align:center">补丁发布</td>
<td style="text-align:center">递增第三位数</td>
<td style="text-align:center">1.0.8</td>
</tr>
<tr>
<td style="text-align:center">次要版本</td>
<td style="text-align:center">递增第二位数，将第三位置位0</td>
<td style="text-align:center">1.2.0</td>
</tr>
<tr>
<td style="text-align:center">主要版本</td>
<td style="text-align:center">递增第一位数，将后俩位数置位0</td>
<td style="text-align:center">3.0.0</td>
</tr>
</tbody>
</table>
<p><strong>注</strong>：版本号不存在十进制说法，当代码一直处于同一阶段更新时，版本号可以一直增加、<code>1.0.35</code>、<code>1.12.5</code>都是可以的。</p>
<h2 id="description" tabindex="-1">description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;description&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>npm包的简短描述，它会显示在npm官方搜索的列表中。</p>
</blockquote>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">description</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">: </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">A Component Library for React</span><span style="color: #89DDFF">&quot;</span></span></code></pre>
</div><h2 id="keywords" tabindex="-1">keywords <a class="header-anchor" href="#keywords" aria-label="Permalink to &quot;keywords&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>npm包的关键词，是一个字符串数组，可以帮助其他人在npm搜索列表中发现你的包。</p>
</blockquote>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">keywords</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">: </span><span style="color: #89DDFF">[</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">react</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">component</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">ui</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #89DDFF">]</span><span style="color: #A6ACCD">,</span></span></code></pre>
</div><h2 id="homepage" tabindex="-1">homepage <a class="header-anchor" href="#homepage" aria-label="Permalink to &quot;homepage&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>npm包项目主页地址，可以是托管平台的地址。</p>
</blockquote>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">homepage</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">: </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">https://github.com/lhz960904/ouio#readme</span><span style="color: #89DDFF">&quot;</span></span></code></pre>
</div><h2 id="bugs" tabindex="-1">bugs <a class="header-anchor" href="#bugs" aria-label="Permalink to &quot;bugs&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>npm包问题反馈的地址，可以是github的issue或者是邮箱地址。对于那些使用遇到问题的人很有帮助。</p>
</blockquote>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">bugs</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">: </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">url</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">https://github.com/lhz960904/ouio/issues</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">email</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">lihaozecq@gmail.com</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="license" tabindex="-1">license <a class="header-anchor" href="#license" aria-label="Permalink to &quot;license&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>为npm包指定许可证，以便其他人知道他们被允许使用方式以及该npm包被施加的任何限制。</p>
</blockquote>
<h2 id="author" tabindex="-1">author <a class="header-anchor" href="#author" aria-label="Permalink to &quot;author&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>npm包的作者，电子邮件和网站都是可以的，以下俩种方式都可以。</p>
</blockquote>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">author</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">: </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">lihaozecq &lt;lihaozecq@gmail.com&gt; (https://github.com/lhz960904)</span><span style="color: #89DDFF">&quot;</span></span></code></pre>
</div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">author</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">: </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">name</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">lihaozecq</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">email</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">lihaozecq@gmail.com</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">url</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">https://github.com/lhz960904</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="files" tabindex="-1">files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;files&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>npm包作为依赖安装时要包括的文件，格式是文件正则的数组，<code>[&quot;*&quot;]</code>代表所有文件。也可以使用<code>npmignore</code> 来忽略个别文件。 <code>files</code>字段优先级最大，不会被<code>npmignore</code>和<code>.gitignore</code>覆盖。</p>
</blockquote>
<p>以下文件总是被包含的，与配置无关</p>
<ul>
<li>package.json</li>
<li>README.md</li>
<li>CHANGES / CHANGELOG / HISTORY</li>
<li>LICENCE / LICENSE</li>
</ul>
<p>以下文件总是被忽略的，与配置无关</p>
<ul>
<li>.git</li>
<li>.DS_Store</li>
<li>node_modules</li>
<li>.npmrc</li>
<li>npm-debug.log</li>
<li>package-lock.json</li>
<li><a href="https://docs.npmjs.com/files/package.json.html#files" target="_blank" rel="noreferrer">等等</a></li>
</ul>
<h2 id="main" tabindex="-1">main <a class="header-anchor" href="#main" aria-label="Permalink to &quot;main&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>指定npm包的入口文件，例 <code>&quot;main&quot;: &quot;src/index.js&quot;</code>当<code>require(name)</code>的时候实质是引入了改文件。</p>
</blockquote>
<h2 id="bin" tabindex="-1">bin <a class="header-anchor" href="#bin" aria-label="Permalink to &quot;bin&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>开发可执行文件时，bin字段可以帮助你设置链接，不需要手动设置PATH。</p>
</blockquote>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">bin</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> : </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">oui</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./cli.js</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>当像上面这样指定时，下载npm包，会自动链接<code>cli.js</code>到<code>use/local/bin/oui</code>，可以直接在命令行执行<code>oui</code>实质上执行的是npm包的<code>cli,js</code>文件，需要在可执行文件头部加上<code>#!/usr/bin/env node</code>，否则会在没有node的时候执行。当只有一个可执行文件且名字和包名一样，可以直接写成字符串形式。</p>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">bin</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">: </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./cli.js</span><span style="color: #89DDFF">&quot;</span></span></code></pre>
</div><h2 id="repository" tabindex="-1">repository <a class="header-anchor" href="#repository" aria-label="Permalink to &quot;repository&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>npm包托管的地方，对于想贡献代码的人是有帮助的。</p>
</blockquote>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">repository</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">: </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">type</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">git</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">url</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">https://github.com/lhz960904/ouio</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="scripts" tabindex="-1">scripts <a class="header-anchor" href="#scripts" aria-label="Permalink to &quot;scripts&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>可执行的命令。<a href="https://docs.npmjs.com/misc/scripts" target="_blank" rel="noreferrer">具体文档</a></p>
</blockquote>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">scripts</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">: </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">dev</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">cross-env NODE_ENV=development node server.js</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">build</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">cross-env NODE_ENV=production node server.js</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="dependencies" tabindex="-1">dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;dependencies&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>npm包所依赖的其他npm包，当使用<code>npm install</code> 下载该包时，<code>dependencies</code>中指定的包都会一并被下载。指定版本范围的规则如下：</p>
</blockquote>
<ul>
<li>version 严格匹配</li>
<li>&gt; version 必须大于该版本</li>
<li>&lt;= version 必须小于等于该版本</li>
<li>^version 兼容版本</li>
<li>1.2.x  1.2.0, 1.2.1等，不能是1.3x</li>
<li><a href="https://docs.npmjs.com/files/package.json.html#dependencies" target="_blank" rel="noreferrer">等等</a></li>
</ul>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">dependencies</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">: </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">react</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">^16.10.2</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">react-dom</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">^16.10.2</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="devdependencies" tabindex="-1">devDependencies <a class="header-anchor" href="#devdependencies" aria-label="Permalink to &quot;devDependencies&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>npm包所依赖的构建和测试相关的npm包，放置到<code>devDependencies</code>，当使用<code>npm install</code> 下载该包时，<code>devDependencies</code>中指定的包不会一并被下载。</p>
</blockquote>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">devDependencies</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">: </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">eslint</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">^6.1.0</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">jest</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">^24.8.0</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">webpack</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">^4.0.0</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="peerdependencies" tabindex="-1">peerDependencies <a class="header-anchor" href="#peerdependencies" aria-label="Permalink to &quot;peerDependencies&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>指定npm包与主npm包的兼容性，当开发插件时是需要的，例如开发React组件时，其组件是依赖于<code>react</code>、<code>react-dom</code>npm包的，可以在<code>peerDependencies</code>指定需要的版本。</p>
</blockquote>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">peerDependencies</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">: </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">react</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">&gt;=16.8.0</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">react-dom</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">&gt;=16.8.0</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><strong>注</strong>：如果<code>peerDependencies </code>指定的npm包没有下载，npm版本1和2会直接下载。 npm3不会下载，会给出警告。</p>
<h2 id="engines" tabindex="-1">engines <a class="header-anchor" href="#engines" aria-label="Permalink to &quot;engines&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>指定npm包可以使用的Node版本</p>
</blockquote>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">engines</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> : </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&quot;</span><span style="color: #C792EA">node</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">&gt;=10.0.0</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://docs.npmjs.com/files/package.json.html" target="_blank" rel="noreferrer">npm官方文档-更全</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JavaScript实现排序算法]]></title>
            <link>https://ihaoze.cn/blog//posts/sort-by-js</link>
            <guid>https://ihaoze.cn/blog//posts/sort-by-js</guid>
            <pubDate>Thu, 27 Jun 2019 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>JS实现排序算法(冒泡排序、选择排序、插入排序、归并排序、快速排序)。</p>
<!-- more -->
<h2 id="冒泡排序" tabindex="-1">冒泡排序 <a class="header-anchor" href="#冒泡排序" aria-label="Permalink to &quot;冒泡排序&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>数组中有 <code>n</code> 个数，比较每相邻两个数，如果前者大于后者，就把两个数交换位置；这样一来，第一轮就可以选出一个最大的数放在最后面；那么经过 <code>n-1</code>（数组的 length - 1） 轮，就完成了所有数的排序。</p>
</blockquote>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">bubbleSort</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 循环n-1轮</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 每轮结束后，最大的数都放在后面，所以长度减去i</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 交换</span></span>
<span class="line"><span style="color: #F07178">        [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="选择排序" tabindex="-1">选择排序 <a class="header-anchor" href="#选择排序" aria-label="Permalink to &quot;选择排序&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>数组中有 <code>n</code> 个数，持续遍历无序部分找到最小的元素的索引，与当前无序的部分开头元素进行交换，这样有序部分<code>+1</code>，遍历<code>n-1</code>轮后，就完成了所有数的排序。</p>
</blockquote>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">selectionSort</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">minIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 找到最小的元素索引</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">minIndex</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">minIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 交换</span></span>
<span class="line"><span style="color: #F07178">    [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">minIndex</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">minIndex</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="插入排序" tabindex="-1">插入排序 <a class="header-anchor" href="#插入排序" aria-label="Permalink to &quot;插入排序&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>数组中有 <code>n</code> 个数，持续遍历无序部分，将循环到的元素插入到前面的有序数组中。<strong>优势</strong>是在于：如果当前元素比他前一个元素要大，说明已经排序好，可提前终止条件。</p>
</blockquote>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">insertionSort</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 从后遍历有序部分，将当前元素与外层元素进行比较，移至到正确位置</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">--</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]]</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="归并排序" tabindex="-1">归并排序 <a class="header-anchor" href="#归并排序" aria-label="Permalink to &quot;归并排序&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>数组中有 <code>n</code> 个数，递归的将数组拆分俩半，直到拆解成最小级别，将俩个有序的数组再进行排序。然后进行合并。合并到顶就是一个排序完成的数组。</p>
</blockquote>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">mergeSort</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">array</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">__mergeSort</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">__mergeSort</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">array</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">l</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">r</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">l</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">mid</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">floor</span><span style="color: #F07178">((</span><span style="color: #A6ACCD">l</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178">) </span><span style="color: #89DDFF">/</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">__mergeSort</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">mid</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">__mergeSort</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">mid</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 优化点：只有当左侧有序列表最后一位 &gt; 右侧有序列表第一位时，才进行merge</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 反之，说明左侧有序列表和右侧有序列表已经形成了一个完整的有序列表</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">array</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">mid</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">array</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">mid</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">__merge</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">mid</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">__merge</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">array</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">l</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">mid</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">r</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">aux</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">l</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// i代表左侧列表当前索引，j代表右侧列表当前索引</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">mid</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// i &gt; mid说明左侧列表遍历结束</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">mid</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">array</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">aux</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// j &gt; r说 明右侧列表遍历结束</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">array</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">aux</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">aux</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">aux</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">array</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">aux</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">array</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">aux</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="快速排序" tabindex="-1">快速排序 <a class="header-anchor" href="#快速排序" aria-label="Permalink to &quot;快速排序&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>从数组中取到一个参考值，通过<code>partition</code>操作将使参考值左侧列表元素都<strong>小于</strong>参考值，右侧列表都<strong>大于</strong>参考值。随后对俩侧列表重复上述的过程。</p>
</blockquote>
<h3 id="普通快速排序" tabindex="-1">普通快速排序 <a class="header-anchor" href="#普通快速排序" aria-label="Permalink to &quot;普通快速排序&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">quickSort</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">array</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">__quickSort</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">__quickSort</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">array</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">l</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">r</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">l</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">__partition</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">__quickSort</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">__quickSort</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 返回p, 使得arr[l...p-1] &lt; arr[p] ; arr[p + 1...r] &gt; arr[p]</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">__partition</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">l</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">r</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 参考标准,随机取</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">radomIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">round</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">random</span><span style="color: #F07178">() </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">r</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178">) </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">radomIndex</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">radomIndex</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// arr[l+1...j] &lt; v ; arr[j+1...i) &gt; v</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 交换: 将小于v的放置到小于列表中的后一位，j进行++</span></span>
<span class="line"><span style="color: #F07178">      [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 将参考值与j进行交换，使得满足左侧小于参考值，右侧大于参考值</span></span>
<span class="line"><span style="color: #F07178">  [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h3 id="双路快速排序" tabindex="-1">双路快速排序 <a class="header-anchor" href="#双路快速排序" aria-label="Permalink to &quot;双路快速排序&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>为了解决数组中存在大量相同元素，导致都在一侧。 使用双路排序，使得相同元素均匀的被分到俩侧。</p>
</blockquote>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">quickSort</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">array</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">__quickSort</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">__quickSort</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">array</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">l</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">r</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">l</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">__partition</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">__quickSort</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">__quickSort</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">array</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 返回p, 使得arr[l...p-1] &lt; arr[p] ; arr[p + 1...r] &gt; arr[p]</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">__partition</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">l</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">r</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 参考标准,随机取</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">radomIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">round</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">random</span><span style="color: #F07178">() </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">r</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178">) </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">radomIndex</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">radomIndex</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178">(</span><span style="color: #FF9CAC">true</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 左右一起向中间靠，直到找到不符合的，进行交换</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">--</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// i &gt; j代表遍历结束</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">break</span></span>
<span class="line"><span style="color: #F07178">    [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]]</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">--</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 将参考值与j进行交换，使得满足左侧小于参考值，右侧大于参考值</span></span>
<span class="line"><span style="color: #F07178">  [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h3 id="三路快速排序" tabindex="-1">三路快速排序 <a class="header-anchor" href="#三路快速排序" aria-label="Permalink to &quot;三路快速排序&quot;">&ZeroWidthSpace;</a></h3>
<blockquote>
<p>对数组中存在大量相同元素来说，比双路快速排序性能更好。因为三路快速排序是对相同元素不作处理，而双路快速排序还需要均匀的交换。</p>
</blockquote>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">quickSort</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">__quickSort</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">__quickSort</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">l</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">r</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">l</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 随机参考标准</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">radomIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">round</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">random</span><span style="color: #F07178">() </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">r</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178">) </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">radomIndex</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">radomIndex</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">lt</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// [l+1...lt] &lt; v</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">gt</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// [gt...r] &gt; v</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// [lt+1...i) === v</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">gt</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 小于</span></span>
<span class="line"><span style="color: #F07178">      [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">lt</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">lt</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">lt</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 大于</span></span>
<span class="line"><span style="color: #F07178">      [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">gt</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">gt</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">gt</span><span style="color: #89DDFF">--</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 相等</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 参考标准与 小于v的最后一个元素交换</span></span>
<span class="line"><span style="color: #F07178">  [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">lt</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">lt</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">l</span><span style="color: #F07178">]] </span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 对小于、大于俩部分进行排序，中间相等的不做操作</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">__quickSort</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">l</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">lt</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">__quickSort</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">gt</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="堆排序" tabindex="-1">堆排序 <a class="header-anchor" href="#堆排序" aria-label="Permalink to &quot;堆排序&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>利用二叉堆的特性(堆中某个节点值都小于父节点的值，完全二叉树)，使用数组生成一个最大堆，依次从堆中取出最大的元素，完成排序。</p>
</blockquote>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">MaxHeap</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">constructor</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> []</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #89DDFF">undefined,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 非叶子节点，进行_shiftDown操作，可以将数组变成堆</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">floor</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">/</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">--</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">_shiftDown</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">get</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">size</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">count</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">get</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">isEmpty</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">insert</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">element</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">count</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">element</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">_shiftUp</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">count</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">extractMax</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">堆为空</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #F78C6C">1</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">count</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">count</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">--</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">_shiftDown</span><span style="color: #F07178">(</span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ret</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">	</span><span style="color: #676E95; font-style: italic">// 将k对应的元素与父亲节点进行比较，如果大于父亲节点就交换，一直到合适的位置</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">_shiftUp</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">k</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">floor</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">/</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #F07178">)] </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">parentIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">floor</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">/</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      [</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">parentIndex</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">]] </span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">parentIndex</span><span style="color: #F07178">]]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">parentIndex</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">	</span><span style="color: #676E95; font-style: italic">// 将k对应的元素与孩子进行比较，找到孩子中最大的值，与元素进行比较，大于就进行交换。</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">_shiftDown</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">k</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #F78C6C">2</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">count</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 右孩子大于左孩子，把j切换成右孩子索引</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">break</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      [</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">]]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 例子</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> arr </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [</span><span style="color: #F78C6C">10</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">9</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">7</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">6</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">99</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">5</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">4</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> heap </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">MaxHeap</span><span style="color: #A6ACCD">(arr)</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #A6ACCD"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">heap</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">isEmpty) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">heap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">extractMax</span><span style="color: #F07178">())</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Object.defineProperty的使用]]></title>
            <link>https://ihaoze.cn/blog//posts/object-defineproperty</link>
            <guid>https://ihaoze.cn/blog//posts/object-defineproperty</guid>
            <pubDate>Sat, 25 May 2019 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Object.defineProperty()，它的作用是可以通过该API直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。Vue框架内部大量使用了此API为对象定义属性，其响应式原理也是通过此API自定义setter与getter而完成的。</p>
<!-- more -->
<p>在平时的业务开发中，<code>Object.defineProperty()</code>基本上使用不到，因为在对象上定义一个新属性直接通过<code>.</code>运算符就可以，例：<code>obj.a = 123</code>。但通过该API可以对一个对象属性做更多的事情，比如数据的拦截、自定义setter与getter等。</p>
<h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>Object.defineProperty(obj, prop, descriptor)</p>
</blockquote>
<ul>
<li><strong>obj</strong>：要在其上定义属性的对象</li>
<li><strong>prop</strong>：要定义或修改的属性的名称</li>
<li><strong>descriptor</strong>：将被定义或修改的属性描述符</li>
</ul>
<p>前俩个参数很简单明了，就是指出要在哪个对象上定义或修改哪个属性。重要的是属性的描述符，当我们通过<code>.</code>运算符定义或修改属性的时候，其实等同于调用了<code>Object.defineProperty()</code>。如下：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> man </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #A6ACCD">man</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">name </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">lihaoze</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getOwnPropertyDescriptor</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// {value: &quot;lihaoze&quot;, writable: true, enumerable: true, configurable: true}</span></span></code></pre>
</div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> man </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">defineProperty</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">value</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">lihaoze</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">writable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">configurable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">enumerable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getOwnPropertyDescriptor</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">name</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// {value: &quot;lihaoze&quot;, writable: true, enumerable: true, configurable: true}</span></span></code></pre>
</div><p><code>value</code>顾名思义就是属性对应的值，但其不一定是必须存在的。它与setter、getter互斥。后面我们会讲到。那<code>writable</code>,<code>enumerable</code>,<code>configurable</code>具体是什么用处呢，我们接下来分别介绍。</p>
<h2 id="writable" tabindex="-1">writable <a class="header-anchor" href="#writable" aria-label="Permalink to &quot;writable&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>当且仅当该属性的writable为true时，value才能被赋值运算符改变。默认为 false。</p>
</blockquote>
<p>当我们通过<code>Object.defineProperty()</code>定义一个属性不设置<code>writable</code>属性，或者设置为false。那么我们将不能通过<code>.</code>的方式来修改属性值。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> man </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">lihaoze</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">defineProperty</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">age</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">value</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">18</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">writable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">configurable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">enumerable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">man</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">age </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">22</span></span>
<span class="line"><span style="color: #82AAFF">alert</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">age) </span><span style="color: #676E95; font-style: italic">// 18</span></span></code></pre>
</div><p>可以看到我永远都是18岁了😜，但总有人想试图揭穿我，所以Ta只要再使用该API重新定义<code>value</code>，就可以修改它。如下</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">defineProperty</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">age</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">value</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">22</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">writable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">configurable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">enumerable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #82AAFF">alert</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">age) </span><span style="color: #676E95; font-style: italic">// 22</span></span></code></pre>
</div><h2 id="configurable" tabindex="-1">configurable <a class="header-anchor" href="#configurable" aria-label="Permalink to &quot;configurable&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。默认为 false。所以，当configurable 为 false的时候，该属性的描述符就不能被修改了，也不能被删除。这是个不可逆的操作。</p>
</blockquote>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> man </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">lihaoze</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">defineProperty</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">age</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">value</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">18</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">writable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">configurable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">enumerable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">man</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">age </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">22</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">age) </span><span style="color: #676E95; font-style: italic">// 22</span></span>
<span class="line"><span style="color: #89DDFF">delete</span><span style="color: #A6ACCD"> man</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">age</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 无法删除该属性 </span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">age) </span><span style="color: #676E95; font-style: italic">// 22 </span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 尝试修改enumerable，无法再次修改描述符 Cannot redefine property: age</span></span>
<span class="line"><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">defineProperty</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">age</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">value</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">18</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">writable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">configurable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">enumerable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><p><strong>但这里有个例外：当writable属性为true的时候，是可以修改成false的。</strong> 看下面代码：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 这时，只有writable可以被修改成false，但false之后，就无法再修改成true</span></span>
<span class="line"><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">defineProperty</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">age</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">value</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">18</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">writable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">configurable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">enumerable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">man</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">age </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">22</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">age) </span><span style="color: #676E95; font-style: italic">// 18</span></span></code></pre>
</div><h2 id="enumerable" tabindex="-1">enumerable <a class="header-anchor" href="#enumerable" aria-label="Permalink to &quot;enumerable&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>当且仅当该属性的enumerable为true时，该属性才能够出现在对象的枚举属性中。默认为 false。
可以直到，这个描述符控制的是属性是否会出现在对象的属性枚举中，比如<code>for..in</code>循环，如果把<code>enumerable</code>设置成false，这个属性不会出现在枚举中，虽然仍然可以访问它。</p>
</blockquote>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> man </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">lihaoze</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">age</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">18</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">defineProperty</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">job</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">value</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Web Engineer</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">writable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">configurable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">enumerable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(man) </span><span style="color: #676E95; font-style: italic">// {name: &quot;lihaoze&quot;, age: 18, job: &quot;Web Engineer&quot;}</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">keys</span><span style="color: #A6ACCD">(man)) </span><span style="color: #676E95; font-style: italic">// [&quot;name&quot;, &quot;age&quot;]</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #A6ACCD"> (</span><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> key </span><span style="color: #89DDFF">in</span><span style="color: #A6ACCD"> man) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #676E95; font-style: italic">// name age</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="set、get" tabindex="-1">set、get <a class="header-anchor" href="#set、get" aria-label="Permalink to &quot;set、get&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>set: 一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。</p>
</blockquote>
<blockquote>
<p>get: 一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入this对象</p>
</blockquote>
<p><strong>注意：当定义了一个属性的set、get描述符，则JavaScript会忽略该属性的value、writable属性。也就是说这俩对儿属于互斥的关系</strong></p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> man </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">lihaoze</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">birthYear</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1996</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 定义setter、getter,</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// get、set方法不能使用本身属性，会造成堆栈溢出 Maximum call stack size exceeded</span></span>
<span class="line"><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">defineProperty</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">age</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">configurable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">enumerable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">get</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">date</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Date</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getFullYear</span><span style="color: #F07178">() </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">birthYear</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">set</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// Uncaught Error: 无法修改真实年龄</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">无法修改真实年龄</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><p>上面的例子通过出生年份来推算我的年龄，当设置年龄的时候，我们抛出错误，防止被修改。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 尝试定义value、writable描述符，会抛出错误</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// Uncaught TypeError: Invalid property descriptor. </span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// Cannot both specify accessors and a value or writable attribute</span></span>
<span class="line"><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">defineProperty</span><span style="color: #A6ACCD">(man</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">age</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">value</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">15</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">configurable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">enumerable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">get</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">date</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Date</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getFullYear</span><span style="color: #F07178">() </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">birthYear</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">set</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// Uncaught Error: 无法修改真实年龄</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">无法修改真实年龄</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><h2 id="应用" tabindex="-1">应用 <a class="header-anchor" href="#应用" aria-label="Permalink to &quot;应用&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>
<p>通过设置set描述符，来终止其他人修改值，并给出于友好的提示，如上面的代码⇧。其中Vue内部也是使用这个方法，来给出我们开发者友好的提示。举几个列子：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 我们不用去弄懂defineReactive，只要知道该函数的第四个参数是定义的get函数，</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 可以看到Vue在非生产环境，会为$attrs、props定义get，防止用户修改该属性，给出提示。</span></span>
<span class="line"><span style="color: #82AAFF">defineReactive</span><span style="color: #A6ACCD">(vm</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">$attrs</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> parentData </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> parentData</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">attrs </span><span style="color: #89DDFF">||</span><span style="color: #A6ACCD"> emptyObject</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">isUpdatingChildComponent</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">warn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">$attrs is readonly.</span><span style="color: #89DDFF">`</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vm</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #82AAFF">defineReactive</span><span style="color: #A6ACCD">(props</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> key</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> value</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">isRoot</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">isUpdatingChildComponent</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">warn</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">Avoid mutating a prop directly since the value will be </span><span style="color: #89DDFF">`</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">overwritten whenever the parent component re-renders. </span><span style="color: #89DDFF">`</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">Instead, use a data or computed property based on the prop&#39;s </span><span style="color: #89DDFF">`</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">value. Prop being mutated: &quot;</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">&quot;</span><span style="color: #89DDFF">`</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">vm</span></span>
<span class="line"><span style="color: #F07178">    )</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div></li>
<li>
<p>通过设置get描述符，来代理对象上面的值，在Vue中我们之所以可以使用<code>this.xxx</code>访问各种数据、方法、props、是因为Vue将这些都设置了set，从而代理到其他私有对象上。看下面代码:</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> vm </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Vue</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">el</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">#app</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #A6ACCD">  data: </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">msg</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">hello world!</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">vm</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">msg </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> vm</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">_data</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">msg </span><span style="color: #676E95; font-style: italic">// true</span></span></code></pre>
</div><p>其中，Vues是通过<code>proxy</code>函数实现数据代理，Vue部分源码如下：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 定义通用描述符</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> sharedPropertyDefinition </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">enumerable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">configurable</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">get</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> noop</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">set</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> noop</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 设置set、get、实现将this[sourceKey]上的值代理到this[key]</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">proxy</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Object</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">sourceKey</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">sharedPropertyDefinition</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">proxyGetter</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">sourceKey</span><span style="color: #F07178">][</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">sharedPropertyDefinition</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">proxySetter</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">sourceKey</span><span style="color: #F07178">][</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">defineProperty</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">sharedPropertyDefinition</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// ... 忽略无关代码</span></span>
<span class="line"><span style="color: #82AAFF">proxy</span><span style="color: #A6ACCD">(vm</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">_data</span><span style="color: #89DDFF">`</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> key)</span></span></code></pre>
</div></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JavaScript中的防抖函数与节流函数]]></title>
            <link>https://ihaoze.cn/blog//posts/throttling-and-debouncing</link>
            <guid>https://ihaoze.cn/blog//posts/throttling-and-debouncing</guid>
            <pubDate>Wed, 13 Mar 2019 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>JS中的防抖(debouncing)与节流(throttling)是用来控制一个函数在一定时间内执行的次数(频次)，他俩个用处相近、但又不完全相同。</p>
<!-- more -->
<h2 id="出现原因" tabindex="-1">出现原因 <a class="header-anchor" href="#出现原因" aria-label="Permalink to &quot;出现原因&quot;">&ZeroWidthSpace;</a></h2>
<p>为什么会出现这俩个技巧呢？换句话说，为什么要控制函数执行的频次？我们看下面的动图，当我们在区域内进行滚动时，如果只是监听scroll事件就去执行函数的时候，函数在1s内被执行的次数要超过30次。</p>
<p><img src="http://cdn.ihaoze.cn/QQ20190313-170819.gif" alt=""></p>
<p>如果我们在回调函数中做大量运算或Dom操作，函数如此高的执行频次就会造成页面的卡顿。为了避免这种情况，防抖与节流就起到了至关作用</p>
<h2 id="防抖函数" tabindex="-1">防抖函数 <a class="header-anchor" href="#防抖函数" aria-label="Permalink to &quot;防抖函数&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>当在一段时间内事件被连续调用时，防抖函数会控制这段时间内函数只会被执行一次。其基本原理就是当函数被调用时设置一个<code>setTimout</code>定时器来延时去执行真正的函数。</p>
</blockquote>
<h3 id="延时结束后执行-trailing" tabindex="-1">延时结束后执行(trailing) <a class="header-anchor" href="#延时结束后执行-trailing" aria-label="Permalink to &quot;延时结束后执行(trailing)&quot;">&ZeroWidthSpace;</a></h3>
<p><img src="http://cdn.ihaoze.cn/WechatIMG20703.png" alt=""></p>
<p>如上图，延时结束后执行是指在这段延时时间内，不再触发函数。则定时器结束后，真正的函数才会被执行。其原理是在真正函数被执行之前，如果函数再次被调用，则重置这个定时器。这种延时结束后执行是最普通、使用最频繁的一种。例如：</p>
<ol>
<li>当用户输入内容进行请求时，为避免无用的请求，当输入停止时进行请求。(对请求函数进行防抖控制)</li>
<li>监听窗口改变时，我们只需要计算最终的窗口大小即可。(监听resize时，对回调函数进行防抖控制)</li>
</ol>
<p>我们也可以点击下方demo，尝试不同频率的点击下方<code>Click</code>，观察防抖函数带来的改变。</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Debounce. Trailing" src="https://codepen.io/lhz960904/embed/YgEvjq?height=252&theme-id=dark&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/lhz960904/pen/YgEvjq'>Debounce. Trailing</a> by lihaoze
  (<a href='https://codepen.io/lhz960904'>@lhz960904</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>
<h3 id="延时开始前执行-leading" tabindex="-1">延时开始前执行(leading) <a class="header-anchor" href="#延时开始前执行-leading" aria-label="Permalink to &quot;延时开始前执行(leading)&quot;">&ZeroWidthSpace;</a></h3>
<p><img src="https://camo.githubusercontent.com/48f5b715521474ca82958bd34e3e146b5d9b34f2/687474703a2f2f63646e2e6968616f7a652e636e2f5765636861744932303731372e706e67" alt=""></p>
<p>如上图，延时开始前执行是指在这段延时时间内，连续的触发函数，只会在最开始执行一次。其原理是设置延时器前执行一次真正的函数，这时定时器作用只是为了标识此次延时时间内不能执行函数。这种延时开始前执行使用场景比较少，例如：</p>
<ol>
<li>当用户点击刷新按钮时，可以尽早的执行函数。因为前后执行其实是一样的效果。本质上只是为了防止用户疯狂刷新</li>
</ol>
<p>同样，我们可以点击下方demo，通过不同频率的点击<code>Click</code>进行测试。</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Debounce. Leading" src="https://codepen.io/lhz960904/embed/drZeRg?height=265&theme-id=dark&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/lhz960904/pen/drZeRg'>Debounce. Leading</a> by lihaoze
  (<a href='https://codepen.io/lhz960904'>@lhz960904</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>
<h2 id="节流函数" tabindex="-1">节流函数 <a class="header-anchor" href="#节流函数" aria-label="Permalink to &quot;节流函数&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>节流函数的原理其实和防抖函数基本相同，不同的是，节流函数会设置一个最长等待执行时间，也就是说节流函数控制在一定时间内函数一定会执行一次。</p>
</blockquote>
<p>像之前的防抖函数(延时结束后执行)，如果我们一直在触发事件，那延时器会一直处于重置状态，真正的函数永远不会被执行，而节流函数会保证在一定时间内，执行一次。想象一下，如果我们要实现触底加载功能，监听scroll事件，在滚动状态下，我们不仅要控制频次，还需要隔一段时间去检查距底部距离。 这时，我们就需要节流函数(throttle)来控制。</p>
<p>同样你可以通过下方demo进行左右侧的滚动测试，左侧因为使用debounce进行控制，只有当滚动停止时才会判断距底部距离，所以会造成卡顿的效果，而右边的通过throttle控制，体验上要好。</p>
<iframe height="300" style="width: 100%;" scrolling="no" title="throttle" src="https://codepen.io/lhz960904/embed/RdjEoE?height=265&theme-id=dark&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/lhz960904/pen/RdjEoE'>throttle</a> by lihaoze
  (<a href='https://codepen.io/lhz960904'>@lhz960904</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>
<h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li><a href="https://css-tricks.com/debouncing-throttling-explained-examples/" target="_blank" rel="noreferrer">https://css-tricks.com/debouncing-throttling-explained-examples/</a></li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[利用正则转换成自定义格式的时间字符串]]></title>
            <link>https://ihaoze.cn/blog//posts/format-time-by-regular</link>
            <guid>https://ihaoze.cn/blog//posts/format-time-by-regular</guid>
            <pubDate>Sat, 08 Sep 2018 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>每个网站都会有时间相关的展示，例如文章、新闻的发布时间，时间选择器的时间展示，显示当天时间等等。基本上后端数据库存储的都是Unix时间戳，前端需要将它转换成对应格式的字符串</p>
<!-- more -->
<p>格式类似于<code>2018.09.08</code>,<code>18-09-08</code>,<code>09-08 16:37</code>, <code>2018-09-08 16:37:00</code>等等等。如果网站的时间展示格式是统一的，你完全可以定一个函数来转换对应的格式，如下</p>
<!-- more -->
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 转换成 ‘2018-09-08 16:37:00’</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">dateFormat</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">time</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">date</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Date</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">time</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 不足俩位补0</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fillZero</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">number</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">number</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">9</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">number</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">0</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">number</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">year</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getFullYear</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">month</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fillZero</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getMonth</span><span style="color: #F07178">() </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">day</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fillZero</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getDate</span><span style="color: #F07178">())</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">hours</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fillZero</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getHours</span><span style="color: #F07178">())</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">minutes</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fillZero</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getMinutes</span><span style="color: #F07178">())</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">seconds</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fillZero</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getSeconds</span><span style="color: #F07178">())</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">`${</span><span style="color: #A6ACCD">year</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">-</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">month</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">-</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">day</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">hours</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">:</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">minutes</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">:</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">seconds</span><span style="color: #89DDFF">}`</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>但当你网站有一区域的时间展示不需要时分秒的时候，这时也可以通过将函数增加参数，来返回不同格式：</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// isHours 参数代表是否需要时分秒</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">dateFormat</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">time</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">isHours</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// .....</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">isHours</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">`${</span><span style="color: #A6ACCD">year</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">-</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">month</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">-</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">day</span><span style="color: #89DDFF">}`</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">`${</span><span style="color: #A6ACCD">year</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">-</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">month</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">-</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">day</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">hours</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">:</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">minutes</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">:</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">seconds</span><span style="color: #89DDFF">}`</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>如果有的情况需要将连接符改为'.'，类似于<code>2018.09.08</code>,再定义个连接符参数，虽然也可以解决问题，但当又有其他格式(类似于只需要年份后俩位<code>18.09.08</code>, 不需要补0<code>2018.9.8</code>)时,你的<code>dateFormat</code>函数就会臃肿起来，传的参数也会越来越多。</p>
<hr>
<p>想要写一个通用的时间转换函数是可以借鉴成熟插件的方法，传入一个格式参数(<code>'YYYY-MM-dd HH:mm:ss'</code>)，来转换对应格式的字符串。这时就可以使用正则，去匹配替换格式中的字母。</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 将时间戳转换为相对应格式时间</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">时间戳</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">time</span><span style="color: #676E95; font-style: italic"> </span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">时间格式</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">format</span><span style="color: #676E95; font-style: italic"> </span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">dateFormat</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">time</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">format</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">date</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Date</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">time</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pattern</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">Y+</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getFullYear</span><span style="color: #F07178">()</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">M+</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getMonth</span><span style="color: #F07178">() </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">D+</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getDate</span><span style="color: #F07178">()</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">h+</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getHours</span><span style="color: #F07178">()</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">m+</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getMinutes</span><span style="color: #F07178">()</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">s+</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getSeconds</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">var</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pattern</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">regexp</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">RegExp</span><span style="color: #F07178">(</span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">(</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">k</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">)</span><span style="color: #89DDFF">`</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">replaceFn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">match</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 当匹配到俩个YY或以上时，替换成年份</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">match</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">includes</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">YY</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pattern</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">])</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">substr</span><span style="color: #F07178">(</span><span style="color: #F78C6C">4</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">match</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 其他的都判断匹配长度是否大于1，大于则补充0，否则直接输出</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fillZero</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">num</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">num</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">9</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">num</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">0</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">num</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">match</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pattern</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">] </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fillZero</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">pattern</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 将字符串按照正则匹配替换成函数返回值</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">format</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">format</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">replace</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">regexp</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">replaceFn</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">format</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>上面函数首先定义了格式参数需要的正则和对应的取值操作，循环遍历正则对象，将匹配出来的字符串替换成时间即可。其中<code>String.replace</code>第一个参数可以是正则，第二个参数可以是返回替换字符串的函数，接受的参数是匹配到的字符传。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noreferrer">传送门</a>
这个函数还有许多不足，其中没有对不允许的格式进行判断，而且只能转换对应时间，不能通过时间戳转换前几天，或几周前的时间。如果业务涉及到复杂的时间转换，可以使用以下几种成熟的时间插件。例如：<a href="https://github.com/date-fns/date-fns" target="_blank" rel="noreferrer">date-fns</a>、<a href="https://github.com/moment/moment" target="_blank" rel="noreferrer">moment</a>、<a href="https://github.com/iamkun/dayjs" target="_blank" rel="noreferrer">dayjs</a></p>
]]></content:encoded>
        </item>
    </channel>
</rss>